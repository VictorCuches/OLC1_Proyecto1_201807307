
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadoresFCA;

import java_cup.runtime.*;
import Reportes.*;
import Interfaz.*;
import ToolsFCA.*;
import Reportes.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\007\000\002\003\006" +
    "\000\002\003\004\000\002\005\004\000\002\005\003\000" +
    "\002\004\006\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\004\000\002\004" +
    "\004\000\002\006\005\000\002\006\004\000\002\011\004" +
    "\000\002\011\003\000\002\010\007\000\002\010\007\000" +
    "\002\010\007\000\002\010\007\000\002\010\004\000\002" +
    "\007\014\000\002\007\004\000\002\012\004\000\002\012" +
    "\003\000\002\013\006\000\002\013\006\000\002\013\010" +
    "\000\002\013\010\000\002\013\006\000\002\013\006\000" +
    "\002\013\006\000\002\013\006\000\002\013\004\000\002" +
    "\014\005\000\002\014\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\004\000\002\016\005\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\004\000\002\020\004\000\002" +
    "\020\003\000\002\021\006\000\002\021\006\000\002\021" +
    "\010\000\002\021\010\000\002\021\004\000\002\022\004" +
    "\000\002\022\003\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\023\006\000\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\006\003\005\016\006\001\002\000\004\002" +
    "\000\001\002\000\012\002\ufffe\003\025\005\026\016\006" +
    "\001\002\000\004\004\011\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\016\003\014\017\013" +
    "\020\016\027\015\035\012\036\017\001\002\000\004\004" +
    "\213\001\002\000\004\010\202\001\002\000\006\005\200" +
    "\012\201\001\002\000\004\004\113\001\002\000\004\004" +
    "\052\001\002\000\004\004\027\001\002\000\020\003\ufff9" +
    "\005\ufff9\017\ufff9\020\ufff9\027\ufff9\035\ufff9\036\ufff9\001" +
    "\002\000\020\003\014\005\022\017\013\020\016\027\015" +
    "\035\012\036\017\001\002\000\010\002\ufffc\003\025\016" +
    "\006\001\002\000\020\003\ufffa\005\ufffa\017\ufffa\020\ufffa" +
    "\027\ufffa\035\ufffa\036\ufffa\001\002\000\004\002\ufffd\001" +
    "\002\000\004\005\026\001\002\000\004\002\ufffb\001\002" +
    "\000\010\003\032\030\031\037\030\001\002\000\004\013" +
    "\045\001\002\000\004\013\040\001\002\000\004\012\037" +
    "\001\002\000\012\003\uffc7\005\uffc7\030\uffc7\037\uffc7\001" +
    "\002\000\012\003\032\005\035\030\031\037\030\001\002" +
    "\000\020\003\ufff4\005\ufff4\017\ufff4\020\ufff4\027\ufff4\035" +
    "\ufff4\036\ufff4\001\002\000\012\003\uffc8\005\uffc8\030\uffc8" +
    "\037\uffc8\001\002\000\012\003\uffc2\005\uffc2\030\uffc2\037" +
    "\uffc2\001\002\000\006\021\041\040\042\001\002\000\004" +
    "\012\044\001\002\000\004\012\043\001\002\000\012\003" +
    "\uffc6\005\uffc6\030\uffc6\037\uffc6\001\002\000\012\003\uffc5" +
    "\005\uffc5\030\uffc5\037\uffc5\001\002\000\006\021\047\040" +
    "\046\001\002\000\004\012\051\001\002\000\004\012\050" +
    "\001\002\000\012\003\uffc3\005\uffc3\030\uffc3\037\uffc3\001" +
    "\002\000\012\003\uffc4\005\uffc4\030\uffc4\037\uffc4\001\002" +
    "\000\010\003\054\022\056\023\053\001\002\000\004\021" +
    "\067\001\002\000\004\012\066\001\002\000\012\003\054" +
    "\005\064\022\056\023\053\001\002\000\004\021\060\001" +
    "\002\000\012\003\uffee\005\uffee\022\uffee\023\uffee\001\002" +
    "\000\004\024\061\001\002\000\004\040\062\001\002\000" +
    "\004\012\063\001\002\000\012\003\uffed\005\uffed\022\uffed" +
    "\023\uffed\001\002\000\020\003\ufff8\005\ufff8\017\ufff8\020" +
    "\ufff8\027\ufff8\035\ufff8\036\ufff8\001\002\000\012\003\uffef" +
    "\005\uffef\022\uffef\023\uffef\001\002\000\012\003\uffe9\005" +
    "\uffe9\022\uffe9\023\uffe9\001\002\000\004\024\070\001\002" +
    "\000\012\003\072\015\071\025\074\026\075\001\002\000" +
    "\004\004\102\001\002\000\004\005\101\001\002\000\004" +
    "\012\100\001\002\000\004\012\077\001\002\000\004\012" +
    "\076\001\002\000\012\003\uffeb\005\uffeb\022\uffeb\023\uffeb" +
    "\001\002\000\012\003\uffec\005\uffec\022\uffec\023\uffec\001" +
    "\002\000\012\003\uffea\005\uffea\022\uffea\023\uffea\001\002" +
    "\000\004\012\uffe7\001\002\000\004\041\103\001\002\000" +
    "\004\014\104\001\002\000\004\040\105\001\002\000\004" +
    "\014\106\001\002\000\004\040\107\001\002\000\004\014" +
    "\110\001\002\000\004\040\111\001\002\000\004\005\112" +
    "\001\002\000\004\012\uffe8\001\002\000\016\003\121\030" +
    "\114\031\122\032\116\033\120\034\115\001\002\000\004" +
    "\013\173\001\002\000\004\013\166\001\002\000\004\013" +
    "\150\001\002\000\020\003\uffe5\005\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\001\002\000\004\013\143\001" +
    "\002\000\004\012\142\001\002\000\004\013\126\001\002" +
    "\000\020\003\121\005\125\030\114\031\122\032\116\033" +
    "\120\034\115\001\002\000\020\003\uffe6\005\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\001\002\000\020\003" +
    "\ufff6\005\ufff6\017\ufff6\020\ufff6\027\ufff6\035\ufff6\036\ufff6" +
    "\001\002\000\004\006\127\001\002\000\010\003\132\021" +
    "\133\040\134\001\002\000\006\007\uffda\014\uffda\001\002" +
    "\000\006\007\137\014\136\001\002\000\004\011\135\001" +
    "\002\000\006\007\uffd9\014\uffd9\001\002\000\006\007\uffd8" +
    "\014\uffd8\001\002\000\006\007\uffd7\014\uffd7\001\002\000" +
    "\010\003\132\021\133\040\134\001\002\000\004\012\140" +
    "\001\002\000\020\003\uffe2\005\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\001\002\000\006\007\uffdb\014\uffdb" +
    "\001\002\000\020\003\uffdc\005\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\001\002\000\006\021\145\040\144" +
    "\001\002\000\004\012\147\001\002\000\004\012\146\001" +
    "\002\000\020\003\uffdf\005\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\001\002\000\020\003\uffe0\005\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\001\002\000\004" +
    "\006\151\001\002\000\014\003\153\021\157\025\155\026" +
    "\156\040\160\001\002\000\006\007\uffd5\014\uffd5\001\002" +
    "\000\004\012\165\001\002\000\006\007\162\014\161\001" +
    "\002\000\006\007\uffd3\014\uffd3\001\002\000\006\007\uffd2" +
    "\014\uffd2\001\002\000\006\007\uffd4\014\uffd4\001\002\000" +
    "\006\007\uffd1\014\uffd1\001\002\000\014\003\153\021\157" +
    "\025\155\026\156\040\160\001\002\000\004\012\163\001" +
    "\002\000\020\003\uffe1\005\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\001\002\000\006\007\uffd6\014\uffd6\001" +
    "\002\000\006\007\uffd0\014\uffd0\001\002\000\006\021\167" +
    "\040\170\001\002\000\004\012\172\001\002\000\004\012" +
    "\171\001\002\000\020\003\uffde\005\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\001\002\000\020\003\uffdd\005" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\001\002" +
    "\000\006\021\174\040\175\001\002\000\004\012\177\001" +
    "\002\000\004\012\176\001\002\000\020\003\uffe4\005\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\001\002\000" +
    "\020\003\uffe3\005\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\001\002\000\020\003\ufff3\005\ufff3\017\ufff3\020" +
    "\ufff3\027\ufff3\035\ufff3\036\ufff3\001\002\000\020\003\ufff2" +
    "\005\ufff2\017\ufff2\020\ufff2\027\ufff2\035\ufff2\036\ufff2\001" +
    "\002\000\006\003\203\040\205\001\002\000\004\011\212" +
    "\001\002\000\004\011\210\001\002\000\004\014\206\001" +
    "\002\000\004\040\207\001\002\000\004\011\ufff1\001\002" +
    "\000\004\012\211\001\002\000\020\003\ufff7\005\ufff7\017" +
    "\ufff7\020\ufff7\027\ufff7\035\ufff7\036\ufff7\001\002\000\004" +
    "\011\ufff0\001\002\000\012\003\216\030\214\031\220\032" +
    "\215\001\002\000\004\013\237\001\002\000\004\013\232" +
    "\001\002\000\004\012\231\001\002\000\014\003\216\005" +
    "\227\030\214\031\220\032\215\001\002\000\004\013\222" +
    "\001\002\000\014\003\uffce\005\uffce\030\uffce\031\uffce\032" +
    "\uffce\001\002\000\004\006\223\001\002\000\010\003\132" +
    "\021\133\040\134\001\002\000\006\007\225\014\136\001" +
    "\002\000\004\012\226\001\002\000\014\003\uffcb\005\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\001\002\000\020\003\ufff5\005" +
    "\ufff5\017\ufff5\020\ufff5\027\ufff5\035\ufff5\036\ufff5\001\002" +
    "\000\014\003\uffcf\005\uffcf\030\uffcf\031\uffcf\032\uffcf\001" +
    "\002\000\014\003\uffc9\005\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\001\002\000\004\006\233\001\002\000\014\003\153\021" +
    "\157\025\155\026\156\040\160\001\002\000\006\007\235" +
    "\014\161\001\002\000\004\012\236\001\002\000\014\003" +
    "\uffca\005\uffca\030\uffca\031\uffca\032\uffca\001\002\000\006" +
    "\021\241\040\240\001\002\000\004\012\243\001\002\000" +
    "\004\012\242\001\002\000\014\003\uffcc\005\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\001\002\000\014\003\uffcd\005\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\006\002\006\003\003\001\001\000\002\001" +
    "\001\000\004\003\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\017\005\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\022\001\001\000\004\003\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\033\023\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\056" +
    "\011\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\122\013\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\130\015" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\153\017" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\216" +
    "\021\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\223\015" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\233\017\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<VariablesGlo> listaVariables = new ArrayList<VariablesGlo>();
    public static ArrayList<GraficaBarras> listaBarras = new ArrayList<GraficaBarras>();
    public static ArrayList<GraficaPie> listaPie = new ArrayList<GraficaPie>();
    public static ArrayList<GraficaLinea> listaLinea = new ArrayList<GraficaLinea>();
    public static ArrayList<CompareFile> listaRuta = new ArrayList<CompareFile>();
    public static ArrayList<Token> listaToken = new ArrayList<Token>();
    
    
    public ArrayList<String> listejex = new ArrayList<String>(); 
    public ArrayList<String> listval = new ArrayList<String>(); 
    private String titu, titux, tituy, file, ruta1, ruta2;

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //Interfaz.PrincipalW.listaError.add(new ErroresF(s.value.toString(),"Error sintactico",String.valueOf(s.left), String.valueOf(s.right), "Archivo .fca"));
      
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
      //Interfaz.PrincipalW.listaError.add(new ErroresF(s.value.toString(),"Error sintactico",String.valueOf(s.left), String.valueOf(s.right), "Archivo fca"));
       
    }  
    
    public void saveToken(String tk, String lin, String col){
        String nameFile = "Archivo.fca";
        switch (tk){
            case "gerepes":
                listaToken.add(new Token("GenerarReporteEstadistico", "pr_gerepes", lin, col, nameFile));
                break;
            case "compare": 
                listaToken.add(new Token("Compare", "pr_compare", lin, col, nameFile));
                break;
            case "defglo": 
                listaToken.add(new Token("DefinirGlobales", "pr_defglobal", lin, col, nameFile));
                break;
            case "grafba": 
                listaToken.add(new Token("GraficaBarras", "pr_grafbarras", lin, col, nameFile));
                break;
            case "grafpie": 
                listaToken.add(new Token("GraficaPie", "pr_grafpie", lin, col, nameFile));
                break;
            case "graflin": 
                listaToken.add(new Token("GraficaLineas", "pr_graflin", lin, col, nameFile));
                break;
            case "titul": 
                listaToken.add(new Token("Titulo", "pr_titulo", lin, col, nameFile));
                break;
            case "ejex": 
                listaToken.add(new Token("Ejex", "pr_ejex", lin, col, nameFile));
                break;
            case "vals": 
                listaToken.add(new Token("Valores", "pr_valores", lin, col, nameFile));
                break;
            case "titulx": 
                listaToken.add(new Token("Titulox", "pr_titulox", lin, col, nameFile));
                break;
            case "tituly": 
                listaToken.add(new Token("Tituloy", "pr_tituloy", lin, col, nameFile));
                break;
            case "arch": 
                listaToken.add(new Token("Archivo", "pr_archivo", lin, col, nameFile));
                break;
            case "punes": 
                listaToken.add(new Token("PuntajeEspecifico", "pr_punespec", lin, col, nameFile));
                break;
            case "stri": 
                listaToken.add(new Token("String", "pr_string", lin, col, nameFile));
                break;
            case "doub": 
                listaToken.add(new Token("Double", "pr_double", lin, col, nameFile));
                break;
            case "para": 
                listaToken.add(new Token("(", "Parentesis abierto", lin, col, nameFile));  
                break;
            case "parc": 
                listaToken.add(new Token(")", "Parentesis cerrado", lin, col, nameFile));
                break;
            case "lla": 
                listaToken.add(new Token("{", "Llave abierta", lin, col, nameFile));
                break;
            case "llac": 
                listaToken.add(new Token("}", "Llave cerrada", lin, col, nameFile));
                break;
            case "cora": 
                listaToken.add(new Token("[", "Corchete abierto", lin, col, nameFile));
                break;
            case "corc": 
                listaToken.add(new Token("]", "Corchete cerrado", lin, col, nameFile));
                break;
            case "coma": 
                listaToken.add(new Token(",", "Coma", lin, col, nameFile));
                break;
            case "dpt": 
                listaToken.add(new Token(":", "Dos puntos", lin, col, nameFile));
                break;
            case "ptc": 
                listaToken.add(new Token(";", "Punto y coma", lin, col, nameFile));
                break;
            case "igual": 
                listaToken.add(new Token("=", "Igual", lin, col, nameFile));
                break;
            case "dolar": 
                listaToken.add(new Token("$", "Simbolo dolar", lin, col, nameFile));
                break;
            
       }
    }
    public void saveToken2(String tk,String dato, String lin, String col){
        String nameFile = "Archivo.fca";
        switch (tk){
            case "ident": 
                listaToken.add(new Token(dato, "Identificador", lin, col, nameFile));
                break;
            case "caden": 
                listaToken.add(new Token(dato, "Cadena", lin, col, nameFile));
                break;
            case "ent": 
                listaToken.add(new Token(dato, "Numero entero", lin, col, nameFile));
                break;
            case "deci": 
                listaToken.add(new Token(dato, "Numero decimal", lin, col, nameFile));
                break;
            case "root": 
                listaToken.add(new Token(dato, "Ruta archivo", lin, col, nameFile));
                break;
        }
    }

    public void saveBarras(){
        listaBarras.add(new GraficaBarras(titu, titux, tituy, listejex, listval));
        titu = "";
        titux = "";
        tituy = "";
        file = "";
        ruta1 = "";
        ruta2 = "";
        listejex.clear();
        listval.clear();
        
    }
    public void savePie(){
        listaPie.add(new GraficaPie(titu, listejex, listval));
        titu = "";
        titux = "";
        tituy = "";
        file = "";
        ruta1 = "";
        ruta2 = "";
        listejex.clear();
        listval.clear();
        
    }
    public void saveLineas(){
        listaLinea.add(new GraficaLinea(titu,file));
        titu = "";
        titux = "";
        tituy = "";
        file = "";
        ruta1 = "";
        ruta2 = "";
        
    }
    public void saveRutas(){
        listaRuta.add(new CompareFile(ruta1,ruta2));
        titu = "";
        titux = "";
        tituy = "";
        file = "";
        ruta1 = "";
        ruta2 = "";
        
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= GEREPES LLAIZQ contenido LLADER instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= GEREPES LLAIZQ contenido LLADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		saveToken("gerepes",String.valueOf(aleft), String.valueOf(aright));
saveToken("lla",String.valueOf(bleft), String.valueOf(bright));
saveToken("llac",String.valueOf(cleft), String.valueOf(cright));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= error LLADER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenido ::= contenido relleno 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenido ::= relleno 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenido",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // relleno ::= DEFGLOBAL LLAIZQ declaracion LLADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		saveToken("defglo",String.valueOf(aleft), String.valueOf(aright));
saveToken("lla",String.valueOf(bleft), String.valueOf(bright));
saveToken("llac",String.valueOf(cleft), String.valueOf(cright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relleno",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // relleno ::= COMPARE PARIZQ infofile PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		saveRutas();
saveToken("compare",String.valueOf(aleft), String.valueOf(aright));
saveToken("para",String.valueOf(bleft), String.valueOf(bright));
saveToken("parc",String.valueOf(cleft), String.valueOf(cright));
saveToken("ptc",String.valueOf(dleft), String.valueOf(dright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relleno",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // relleno ::= GRAFBARRAS LLAIZQ caracbar LLADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		saveBarras();
saveToken("grafba",String.valueOf(aleft), String.valueOf(aright));
saveToken("lla",String.valueOf(bleft), String.valueOf(bright));
saveToken("llac",String.valueOf(cleft), String.valueOf(cright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relleno",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // relleno ::= GRAFPIE LLAIZQ caracpie LLADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		savePie();
saveToken("grafpie",String.valueOf(aleft), String.valueOf(aright));
saveToken("lla",String.valueOf(bleft), String.valueOf(bright));
saveToken("llac",String.valueOf(cleft), String.valueOf(cright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relleno",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // relleno ::= GRAFLIN LLAIZQ caraclin LLADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		saveLineas();
saveToken("graflin",String.valueOf(aleft), String.valueOf(aright));
saveToken("lla",String.valueOf(bleft), String.valueOf(bright));
saveToken("llac",String.valueOf(cleft), String.valueOf(cright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relleno",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // relleno ::= error LLADER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relleno",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // relleno ::= error PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relleno",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // infofile ::= CADENA COMA CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ruta1=a; ruta2=b;
saveToken("coma",String.valueOf(cleft), String.valueOf(cright));
saveToken2("root",a.toString(),String.valueOf(aleft), String.valueOf(aright));
saveToken2("root",b.toString(),String.valueOf(bleft), String.valueOf(bright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("infofile",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // infofile ::= error PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("infofile",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= declaracion variables 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= variables 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variables ::= STRINGO IDENTIFI IGUAL CADENA PTCOMA 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String vali = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = listaVariables.add(new VariablesGlo(type,id,vali));
saveToken("stri",String.valueOf(typeleft), String.valueOf(typeright));
saveToken2("ident",id.toString(),String.valueOf(idleft), String.valueOf(idright));
saveToken("igual",String.valueOf(aleft), String.valueOf(aright));
saveToken2("caden",vali.toString(),String.valueOf(valileft), String.valueOf(valiright));
saveToken("ptc",String.valueOf(bleft), String.valueOf(bright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variables ::= DOUBLE IDENTIFI IGUAL DECIMAL PTCOMA 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String vali = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = listaVariables.add(new VariablesGlo(type,id,vali));
saveToken("doub",String.valueOf(typeleft), String.valueOf(typeright));
saveToken2("ident",id.toString(),String.valueOf(idleft), String.valueOf(idright));
saveToken("igual",String.valueOf(aleft), String.valueOf(aright));
saveToken2("deci",vali.toString(),String.valueOf(valileft), String.valueOf(valiright));
saveToken("ptc",String.valueOf(bleft), String.valueOf(bright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variables ::= DOUBLE IDENTIFI IGUAL ENTERO PTCOMA 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String vali = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = listaVariables.add(new VariablesGlo(type,id,vali));
saveToken("doub",String.valueOf(typeleft), String.valueOf(typeright));
saveToken2("ident",id.toString(),String.valueOf(idleft), String.valueOf(idright));
saveToken("igual",String.valueOf(aleft), String.valueOf(aright));
saveToken2("ent",vali.toString(),String.valueOf(valileft), String.valueOf(valiright));
saveToken("ptc",String.valueOf(bleft), String.valueOf(bright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variables ::= DOUBLE IDENTIFI IGUAL puntaje PTCOMA 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
saveToken2("ident",id.toString(),String.valueOf(idleft), String.valueOf(idright));
saveToken("igual",String.valueOf(aleft), String.valueOf(aright));
saveToken("ptc",String.valueOf(bleft), String.valueOf(bright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variables ::= error PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // puntaje ::= DOLAR LLAIZQ PUNESP COMA CADENA COMA CADENA COMA CADENA LLADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("puntaje",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // puntaje ::= error LLADER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("puntaje",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // caracbar ::= caracbar elementbar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caracbar",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // caracbar ::= elementbar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caracbar",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // elementbar ::= TITULO DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		titu = title;
saveToken("titul",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));
saveToken2("caden",title.toString(),String.valueOf(titleleft), String.valueOf(titleright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementbar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // elementbar ::= TITULO DOSPT IDENTIFI PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		titu = title;
saveToken("titul",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));
saveToken2("caden",title.toString(),String.valueOf(titleleft), String.valueOf(titleright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementbar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elementbar ::= EJEX DOSPT CORIZQ listaejex CORDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		saveToken("ejex",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("cora",String.valueOf(cleft), String.valueOf(cright));
saveToken("corc",String.valueOf(dleft), String.valueOf(dright));
saveToken("ptc",String.valueOf(eleft), String.valueOf(eright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementbar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // elementbar ::= VALORES DOSPT CORIZQ listaval CORDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		saveToken("vals",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("cora",String.valueOf(cleft), String.valueOf(cright));
saveToken("corc",String.valueOf(dleft), String.valueOf(dright));
saveToken("ptc",String.valueOf(eleft), String.valueOf(eright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementbar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // elementbar ::= TITULOX DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int titlexleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int titlexright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String titlex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		titux = titlex;
saveToken("titulx",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken2("caden",titlex.toString(),String.valueOf(titlexleft), String.valueOf(titlexright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementbar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elementbar ::= TITULOX DOSPT IDENTIFI PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int titlexleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int titlexright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String titlex = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		titux = titlex;
saveToken("titulx",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken2("ident",titlex.toString(),String.valueOf(titlexleft), String.valueOf(titlexright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementbar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elementbar ::= TITULOY DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int titleyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int titleyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String titley = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tituy = titley;
saveToken("tituly",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken2("caden",titley.toString(),String.valueOf(titleyleft), String.valueOf(titleyright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementbar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elementbar ::= TITULOY DOSPT IDENTIFI PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int titleyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int titleyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String titley = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tituy = titley;
saveToken("tituly",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken2("ident",titley.toString(),String.valueOf(titleyleft), String.valueOf(titleyright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementbar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elementbar ::= error PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementbar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listaejex ::= listaejex COMA listaejexx 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaejex",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaejex ::= listaejexx 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaejex",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaejexx ::= IDENTIFI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listejex.add(val);
saveToken2("ident",val.toString(),String.valueOf(valleft), String.valueOf(valright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaejexx",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listaejexx ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listejex.add(val);
saveToken2("caden",val.toString(),String.valueOf(valleft), String.valueOf(valright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaejexx",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listaejexx ::= error PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaejexx",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listaval ::= listaval COMA listavall 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaval",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listaval ::= listavall 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaval",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listavall ::= IDENTIFI 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listval.add(val2);
saveToken2("ident",val2.toString(),String.valueOf(val2left), String.valueOf(val2right));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listavall",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listavall ::= DECIMAL 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listval.add(val2);
saveToken2("deci",val2.toString(),String.valueOf(val2left), String.valueOf(val2right));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listavall",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listavall ::= ENTERO 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listval.add(val2);
saveToken2("ent",val2.toString(),String.valueOf(val2left), String.valueOf(val2right));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listavall",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listavall ::= CADENA 
            {
              Object RESULT =null;
		int val2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		listval.add(val2);
saveToken2("caden",val2.toString(),String.valueOf(val2left), String.valueOf(val2right));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listavall",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listavall ::= error PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listavall",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // caracpie ::= caracpie elementpie 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caracpie",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // caracpie ::= elementpie 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caracpie",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elementpie ::= TITULO DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		titu = title;
saveToken("titul",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));
saveToken2("caden",title.toString(),String.valueOf(titleleft), String.valueOf(titleright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementpie",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // elementpie ::= TITULO DOSPT IDENTIFI PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		titu = title;
saveToken("titul",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));
saveToken2("ident",title.toString(),String.valueOf(titleleft), String.valueOf(titleright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementpie",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elementpie ::= EJEX DOSPT CORIZQ listaejex CORDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		saveToken("ejex",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("cora",String.valueOf(cleft), String.valueOf(cright));
saveToken("corc",String.valueOf(dleft), String.valueOf(dright));
saveToken("ptc",String.valueOf(eleft), String.valueOf(eright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementpie",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // elementpie ::= VALORES DOSPT CORIZQ listaval CORDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		saveToken("vals",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("cora",String.valueOf(cleft), String.valueOf(cright));
saveToken("corc",String.valueOf(dleft), String.valueOf(dright));
saveToken("ptc",String.valueOf(eleft), String.valueOf(eright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementpie",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elementpie ::= error PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementpie",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // caraclin ::= caraclin elementlin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caraclin",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // caraclin ::= elementlin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caraclin",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // elementlin ::= TITULO DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		titu = title;
saveToken("titul",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));
saveToken2("caden",title.toString(),String.valueOf(titleleft), String.valueOf(titleright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementlin",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // elementlin ::= TITULO DOSPT IDENTIFI PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		titu = title;
saveToken("titul",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));
saveToken2("ident",title.toString(),String.valueOf(titleleft), String.valueOf(titleright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementlin",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elementlin ::= ARCHIVO DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int archileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int archiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String archi = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		file = archi;
saveToken("arch",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));
saveToken2("caden",archi.toString(),String.valueOf(archileft), String.valueOf(archiright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementlin",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // elementlin ::= ARCHIVO DOSPT IDENTIFI PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int archileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int archiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String archi = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		file = archi;
saveToken("arch",String.valueOf(aleft), String.valueOf(aright));
saveToken("dpt",String.valueOf(bleft), String.valueOf(bright));
saveToken("ptc",String.valueOf(cleft), String.valueOf(cright));
saveToken2("ident",archi.toString(),String.valueOf(archileft), String.valueOf(archiright));

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementlin",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // elementlin ::= error PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elementlin",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
