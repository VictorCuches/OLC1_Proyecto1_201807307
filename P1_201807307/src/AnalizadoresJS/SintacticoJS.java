
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadoresJS;

import java_cup.runtime.*;
import Interfaz.*;
import Reportes.*;
import Repitencia.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\035\004\000" +
    "\002\035\003\000\002\036\007\000\002\004\004\000\002" +
    "\004\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\011\011\000\002\011\010\000\002\014\004\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\032\007\000\002\032\006\000\002\032\006\000\002" +
    "\032\005\000\002\033\012\000\002\033\011\000\002\033" +
    "\011\000\002\033\010\000\002\033\006\000\002\033\007" +
    "\000\002\031\011\000\002\031\010\000\002\031\011\000" +
    "\002\031\010\000\002\031\011\000\002\031\010\000\002" +
    "\031\011\000\002\031\010\000\002\026\011\000\002\027" +
    "\004\000\002\027\003\000\002\030\006\000\002\030\006" +
    "\000\002\030\006\000\002\030\006\000\002\030\005\000" +
    "\002\025\013\000\002\025\012\000\002\025\016\000\002" +
    "\025\015\000\002\024\011\000\002\024\014\000\002\022" +
    "\020\000\002\022\020\000\002\022\017\000\002\022\017" +
    "\000\002\023\005\000\002\023\005\000\002\016\011\000" +
    "\002\016\015\000\002\016\021\000\002\016\013\000\002" +
    "\016\017\000\002\016\023\000\002\016\023\000\002\016" +
    "\025\000\002\021\004\000\002\021\004\000\002\021\003" +
    "\000\002\021\004\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\005\000\002" +
    "\020\006\000\002\020\005\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\034\003\000\002\034\004" +
    "\000\002\012\005\000\002\012\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\006\007\000\002\006\006\000\002\006\006\000\002\006" +
    "\005\000\002\006\007\000\002\006\006\000\002\006\005" +
    "\000\002\006\004\000\002\006\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0128\000\012\003\006\015\010\057\007\060\012\001" +
    "\002\000\004\002\000\001\002\000\006\002\ufff8\015\ufff8" +
    "\001\002\000\016\002\ufffe\003\016\005\017\015\010\057" +
    "\007\060\012\001\002\000\012\003\016\015\010\057\007" +
    "\060\012\001\002\000\004\016\021\001\002\000\006\002" +
    "\ufffb\015\010\001\002\000\012\003\016\015\010\057\007" +
    "\060\012\001\002\000\004\002\014\001\002\000\004\002" +
    "\001\001\002\000\004\002\ufffc\001\002\000\004\005\017" +
    "\001\002\000\004\002\ufffa\001\002\000\006\002\ufff9\015" +
    "\ufff9\001\002\000\004\004\022\001\002\000\020\016\027" +
    "\017\026\020\032\021\040\042\030\057\035\060\034\001" +
    "\002\000\022\005\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\042\ufff5\057\ufff5\060\ufff5\001\002\000\022\005\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\042\ufff1\057\ufff1\060\ufff1" +
    "\001\002\000\004\016\u011d\001\002\000\004\016\uff91\001" +
    "\002\000\006\006\047\011\050\001\002\000\004\006\043" +
    "\001\002\000\022\005\041\016\027\017\026\020\032\021" +
    "\040\042\030\057\035\060\034\001\002\000\004\016\uff90" +
    "\001\002\000\022\005\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\042\ufff2\057\ufff2\060\ufff2\001\002\000\022\005\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\042\uffef\057\uffef\060" +
    "\uffef\001\002\000\022\005\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\042\ufff0\057\ufff0\060\ufff0\001\002\000\022\005" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\042\ufff3\057\ufff3" +
    "\060\ufff3\001\002\000\022\005\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\042\ufff4\057\ufff4\060\ufff4\001\002\000\004" +
    "\016\uff8f\001\002\000\006\002\ufff7\015\ufff7\001\002\000" +
    "\022\005\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\042\ufff6" +
    "\057\ufff6\060\ufff6\001\002\000\004\022\044\001\002\000" +
    "\004\007\045\001\002\000\046\005\uffd6\010\046\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\027\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6" +
    "\057\uffd6\060\uffd6\001\002\000\044\005\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\057" +
    "\uffd5\060\uffd5\001\002\000\014\007\067\016\073\022\074" +
    "\023\072\024\071\001\002\000\020\016\057\022\060\023" +
    "\056\024\053\025\051\026\052\042\054\001\002\000\046" +
    "\005\uff8b\010\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\027" +
    "\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\042\uff8b\057\uff8b\060\uff8b\001\002\000" +
    "\046\005\uff8a\010\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a" +
    "\027\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036" +
    "\uff8a\037\uff8a\040\uff8a\042\uff8a\057\uff8a\060\uff8a\001\002" +
    "\000\046\005\uff8d\010\uff8d\016\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\027\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d" +
    "\036\uff8d\037\uff8d\040\uff8d\042\uff8d\057\uff8d\060\uff8d\001" +
    "\002\000\004\006\063\001\002\000\046\005\uff97\010\062" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\027\uff97\031\uff97\032" +
    "\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97" +
    "\042\uff97\057\uff97\060\uff97\001\002\000\046\005\uff8e\010" +
    "\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\027\uff8e\031\uff8e" +
    "\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\042\uff8e\057\uff8e\060\uff8e\001\002\000\046\005\uff94" +
    "\010\061\016\uff94\017\uff94\020\uff94\021\uff94\027\uff94\031" +
    "\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94" +
    "\040\uff94\042\uff94\057\uff94\060\uff94\001\002\000\046\005" +
    "\uff8c\010\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\027\uff8c" +
    "\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037" +
    "\uff8c\040\uff8c\042\uff8c\057\uff8c\060\uff8c\001\002\000\044" +
    "\005\uff95\016\uff95\017\uff95\020\uff95\021\uff95\027\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\040\uff95\042\uff95\057\uff95\060\uff95\001\002\000\044\005" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\027\uff98\031\uff98" +
    "\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040" +
    "\uff98\042\uff98\057\uff98\060\uff98\001\002\000\004\022\064" +
    "\001\002\000\004\007\065\001\002\000\046\005\uffd7\010" +
    "\066\016\uffd7\017\uffd7\020\uffd7\021\uffd7\027\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\042\uffd7\057\uffd7\060\uffd7\001\002\000\044\005\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\027\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\042\uffd8\057\uffd8\060\uffd8\001\002\000\026\004\u011a\005" +
    "\uffdb\010\237\016\uffdb\017\uffdb\020\uffdb\021\uffdb\042\uffdb" +
    "\057\uffdb\060\uffdb\001\002\000\006\007\uff9f\012\uff9f\001" +
    "\002\000\006\007\uff9d\012\uff9d\001\002\000\006\007\uff9c" +
    "\012\uff9c\001\002\000\006\007\uff9e\012\uff9e\001\002\000" +
    "\006\007\uff9b\012\uff9b\001\002\000\006\007\077\012\076" +
    "\001\002\000\012\016\073\022\074\023\072\024\071\001" +
    "\002\000\026\004\100\005\uffdd\010\101\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\042\uffdd\057\uffdd\060\uffdd\001\002\000" +
    "\036\016\123\017\026\020\032\021\040\027\114\031\126" +
    "\032\107\033\116\034\110\037\122\040\112\042\030\057" +
    "\102\060\103\001\002\000\044\005\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\027\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde\057\uffde" +
    "\060\uffde\001\002\000\044\005\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\057\uffe0\060" +
    "\uffe0\001\002\000\044\005\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\027\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\057\uffdf\060\uffdf" +
    "\001\002\000\040\005\u0118\016\123\017\026\020\032\021" +
    "\040\027\114\031\126\032\107\033\116\034\110\037\122" +
    "\040\112\042\030\057\102\060\103\001\002\000\044\005" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\027\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\042\uffe1\057\uffe1\060\uffe1\001\002\000\044\005\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\027\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\042\uffe8\057\uffe8\060\uffe8\001\002\000\004\006\u010a\001" +
    "\002\000\004\006\362\001\002\000\044\005\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\027\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea" +
    "\057\uffea\060\uffea\001\002\000\004\014\343\001\002\000" +
    "\044\005\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\027\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\042\uffe6\057\uffe6\060\uffe6\001\002\000\004" +
    "\006\257\001\002\000\044\005\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\057\uffe5\060" +
    "\uffe5\001\002\000\004\004\241\001\002\000\044\005\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\027\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\042\uffe9\057\uffe9\060\uffe9\001\002\000\044\005\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\027\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042" +
    "\uffe2\057\uffe2\060\uffe2\001\002\000\044\005\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\027\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3" +
    "\057\uffe3\060\uffe3\001\002\000\046\005\uffa2\010\240\016" +
    "\uffa2\017\uffa2\020\uffa2\021\uffa2\027\uffa2\031\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\042" +
    "\uffa2\057\uffa2\060\uffa2\001\002\000\006\006\233\011\050" +
    "\001\002\000\044\005\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\027\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\042\uffe7\057\uffe7\060\uffe7\001" +
    "\002\000\044\005\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\042\uffe4\057\uffe4\060\uffe4\001\002" +
    "\000\004\006\130\001\002\000\044\005\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\057" +
    "\uffeb\060\uffeb\001\002\000\012\016\132\017\026\020\032" +
    "\021\040\001\002\000\004\016\207\001\002\000\004\011" +
    "\133\001\002\000\006\016\135\023\134\001\002\000\004" +
    "\010\177\001\002\000\004\010\136\001\002\000\012\016" +
    "\142\022\143\023\141\024\140\001\002\000\004\010\163" +
    "\001\002\000\022\007\uffab\010\uffab\011\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\001\002\000\022\007\uffaa" +
    "\010\uffaa\011\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\001\002\000\022\007\uffac\010\uffac\011\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\047\uffac\001\002\000\022\007" +
    "\uffa9\010\uffa9\011\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9" +
    "\047\uffa9\001\002\000\012\011\145\043\150\044\146\045" +
    "\147\001\002\000\004\011\161\001\002\000\014\011\156" +
    "\016\142\022\143\023\141\024\140\001\002\000\004\011" +
    "\154\001\002\000\014\011\151\016\142\022\143\023\141" +
    "\024\140\001\002\000\012\016\142\022\143\023\141\024" +
    "\140\001\002\000\014\007\uffa8\010\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\001\002\000\014\007\uffa7\010\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\001\002\000\012\016\142\022\143\023\141" +
    "\024\140\001\002\000\014\007\uffa3\010\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\001\002\000\012\016\142\022\143\023\141" +
    "\024\140\001\002\000\014\007\uffa6\010\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\001\002\000\014\007\uffa5\010\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\001\002\000\012\016\142\022\143\023" +
    "\141\024\140\001\002\000\014\007\uffa4\010\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\001\002\000\004\016\165\001\002\000" +
    "\004\007\172\001\002\000\006\050\166\051\167\001\002" +
    "\000\004\050\171\001\002\000\004\051\170\001\002\000" +
    "\004\007\uffb9\001\002\000\004\007\uffba\001\002\000\004" +
    "\004\173\001\002\000\036\016\123\017\026\020\032\021" +
    "\040\027\114\031\126\032\107\033\116\034\110\037\122" +
    "\040\112\042\030\057\102\060\103\001\002\000\040\005" +
    "\175\016\123\017\026\020\032\021\040\027\114\031\126" +
    "\032\107\033\116\034\110\037\122\040\112\042\030\057" +
    "\102\060\103\001\002\000\044\005\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\027\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\042\uffbb\057\uffbb" +
    "\060\uffbb\001\002\000\044\005\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\042\uffec\057\uffec\060" +
    "\uffec\001\002\000\012\016\142\022\143\023\141\024\140" +
    "\001\002\000\004\010\201\001\002\000\004\016\165\001" +
    "\002\000\004\007\203\001\002\000\004\004\204\001\002" +
    "\000\036\016\123\017\026\020\032\021\040\027\114\031" +
    "\126\032\107\033\116\034\110\037\122\040\112\042\030" +
    "\057\102\060\103\001\002\000\040\005\206\016\123\017" +
    "\026\020\032\021\040\027\114\031\126\032\107\033\116" +
    "\034\110\037\122\040\112\042\030\057\102\060\103\001" +
    "\002\000\044\005\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\027\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\042\uffbc\057\uffbc\060\uffbc\001\002" +
    "\000\004\011\210\001\002\000\006\016\211\023\212\001" +
    "\002\000\004\010\223\001\002\000\004\010\213\001\002" +
    "\000\012\016\142\022\143\023\141\024\140\001\002\000" +
    "\004\010\215\001\002\000\004\016\165\001\002\000\004" +
    "\007\217\001\002\000\004\004\220\001\002\000\036\016" +
    "\123\017\026\020\032\021\040\027\114\031\126\032\107" +
    "\033\116\034\110\037\122\040\112\042\030\057\102\060" +
    "\103\001\002\000\040\005\222\016\123\017\026\020\032" +
    "\021\040\027\114\031\126\032\107\033\116\034\110\037" +
    "\122\040\112\042\030\057\102\060\103\001\002\000\044" +
    "\005\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\027\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\042\uffbe\057\uffbe\060\uffbe\001\002\000\012\016" +
    "\142\022\143\023\141\024\140\001\002\000\004\010\225" +
    "\001\002\000\004\016\165\001\002\000\004\007\227\001" +
    "\002\000\004\004\230\001\002\000\036\016\123\017\026" +
    "\020\032\021\040\027\114\031\126\032\107\033\116\034" +
    "\110\037\122\040\112\042\030\057\102\060\103\001\002" +
    "\000\040\005\232\016\123\017\026\020\032\021\040\027" +
    "\114\031\126\032\107\033\116\034\110\037\122\040\112" +
    "\042\030\057\102\060\103\001\002\000\044\005\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\027\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\042" +
    "\uffbd\057\uffbd\060\uffbd\001\002\000\014\007\234\016\073" +
    "\022\074\023\072\024\071\001\002\000\046\005\uffdb\010" +
    "\237\016\uffdb\017\uffdb\020\uffdb\021\uffdb\027\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\042\uffdb\057\uffdb\060\uffdb\001\002\000\006\007\236" +
    "\012\076\001\002\000\046\005\uffdd\010\101\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\057" +
    "\uffdd\060\uffdd\001\002\000\044\005\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\057\uffdc" +
    "\060\uffdc\001\002\000\044\005\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\027\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1" +
    "\035\uffa1\036\uffa1\037\uffa1\040\uffa1\042\uffa1\057\uffa1\060" +
    "\uffa1\001\002\000\036\016\123\017\026\020\032\021\040" +
    "\027\114\031\126\032\107\033\116\034\110\037\122\040" +
    "\112\042\030\057\102\060\103\001\002\000\040\005\243" +
    "\016\123\017\026\020\032\021\040\027\114\031\126\032" +
    "\107\033\116\034\110\037\122\040\112\042\030\057\102" +
    "\060\103\001\002\000\004\032\244\001\002\000\004\006" +
    "\245\001\002\000\014\016\142\022\143\023\141\024\140" +
    "\045\247\001\002\000\004\007\255\001\002\000\004\006" +
    "\250\001\002\000\012\016\142\022\143\023\141\024\140" +
    "\001\002\000\004\007\252\001\002\000\004\007\253\001" +
    "\002\000\046\005\uffc1\010\254\016\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\042\uffc1\057\uffc1\060\uffc1" +
    "\001\002\000\044\005\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\042\uffc2\057\uffc2\060\uffc2\001" +
    "\002\000\046\005\uffc3\010\256\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\042\uffc3\057\uffc3\060\uffc3" +
    "\001\002\000\044\005\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\042\uffc4\057\uffc4\060\uffc4\001" +
    "\002\000\012\016\142\022\143\023\141\024\140\001\002" +
    "\000\012\007\263\045\264\046\262\047\265\001\002\000" +
    "\012\016\142\022\143\023\141\024\140\001\002\000\004" +
    "\046\314\001\002\000\004\004\270\001\002\000\014\011" +
    "\267\016\uffae\022\uffae\023\uffae\024\uffae\001\002\000\004" +
    "\047\266\001\002\000\012\016\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\001\002\000\012\016\uffad\022\uffad\023\uffad\024\uffad" +
    "\001\002\000\036\016\123\017\026\020\032\021\040\027" +
    "\114\031\126\032\107\033\116\034\110\037\122\040\112" +
    "\042\030\057\102\060\103\001\002\000\040\005\272\016" +
    "\123\017\026\020\032\021\040\027\114\031\126\032\107" +
    "\033\116\034\110\037\122\040\112\042\030\057\102\060" +
    "\103\001\002\000\046\005\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\027\uffb8\030\273\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\042\uffb8\057\uffb8" +
    "\060\uffb8\001\002\000\006\004\274\027\275\001\002\000" +
    "\036\016\123\017\026\020\032\021\040\027\114\031\126" +
    "\032\107\033\116\034\110\037\122\040\112\042\030\057" +
    "\102\060\103\001\002\000\004\006\276\001\002\000\012" +
    "\016\142\022\143\023\141\024\140\001\002\000\012\007" +
    "\301\045\264\046\262\047\265\001\002\000\012\016\142" +
    "\022\143\023\141\024\140\001\002\000\004\004\302\001" +
    "\002\000\036\016\123\017\026\020\032\021\040\027\114" +
    "\031\126\032\107\033\116\034\110\037\122\040\112\042" +
    "\030\057\102\060\103\001\002\000\040\005\304\016\123" +
    "\017\026\020\032\021\040\027\114\031\126\032\107\033" +
    "\116\034\110\037\122\040\112\042\030\057\102\060\103" +
    "\001\002\000\044\005\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\042\uffb6\057\uffb6\060\uffb6\001" +
    "\002\000\004\007\306\001\002\000\004\004\307\001\002" +
    "\000\036\016\123\017\026\020\032\021\040\027\114\031" +
    "\126\032\107\033\116\034\110\037\122\040\112\042\030" +
    "\057\102\060\103\001\002\000\040\005\311\016\123\017" +
    "\026\020\032\021\040\027\114\031\126\032\107\033\116" +
    "\034\110\037\122\040\112\042\030\057\102\060\103\001" +
    "\002\000\044\005\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\027\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\042\uffb2\057\uffb2\060\uffb2\001\002" +
    "\000\040\005\313\016\123\017\026\020\032\021\040\027" +
    "\114\031\126\032\107\033\116\034\110\037\122\040\112" +
    "\042\030\057\102\060\103\001\002\000\044\005\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\027\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\042" +
    "\uffb7\057\uffb7\060\uffb7\001\002\000\012\016\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\001\002\000\004\007\316\001\002\000" +
    "\004\004\317\001\002\000\036\016\123\017\026\020\032" +
    "\021\040\027\114\031\126\032\107\033\116\034\110\037" +
    "\122\040\112\042\030\057\102\060\103\001\002\000\040" +
    "\005\321\016\123\017\026\020\032\021\040\027\114\031" +
    "\126\032\107\033\116\034\110\037\122\040\112\042\030" +
    "\057\102\060\103\001\002\000\046\005\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\027\uffb5\030\322\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\042" +
    "\uffb5\057\uffb5\060\uffb5\001\002\000\006\004\323\027\324" +
    "\001\002\000\036\016\123\017\026\020\032\021\040\027" +
    "\114\031\126\032\107\033\116\034\110\037\122\040\112" +
    "\042\030\057\102\060\103\001\002\000\004\006\325\001" +
    "\002\000\012\016\142\022\143\023\141\024\140\001\002" +
    "\000\012\007\330\045\264\046\262\047\265\001\002\000" +
    "\012\016\142\022\143\023\141\024\140\001\002\000\004" +
    "\004\331\001\002\000\036\016\123\017\026\020\032\021" +
    "\040\027\114\031\126\032\107\033\116\034\110\037\122" +
    "\040\112\042\030\057\102\060\103\001\002\000\040\005" +
    "\333\016\123\017\026\020\032\021\040\027\114\031\126" +
    "\032\107\033\116\034\110\037\122\040\112\042\030\057" +
    "\102\060\103\001\002\000\044\005\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\042\uffb3\057\uffb3" +
    "\060\uffb3\001\002\000\004\007\335\001\002\000\004\004" +
    "\336\001\002\000\036\016\123\017\026\020\032\021\040" +
    "\027\114\031\126\032\107\033\116\034\110\037\122\040" +
    "\112\042\030\057\102\060\103\001\002\000\040\005\340" +
    "\016\123\017\026\020\032\021\040\027\114\031\126\032" +
    "\107\033\116\034\110\037\122\040\112\042\030\057\102" +
    "\060\103\001\002\000\044\005\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\042\uffb1\057\uffb1\060" +
    "\uffb1\001\002\000\040\005\342\016\123\017\026\020\032" +
    "\021\040\027\114\031\126\032\107\033\116\034\110\037" +
    "\122\040\112\042\030\057\102\060\103\001\002\000\044" +
    "\005\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\027\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\042\uffb4\057\uffb4\060\uffb4\001\002\000\004\041" +
    "\344\001\002\000\004\006\345\001\002\000\012\016\351" +
    "\022\350\023\347\024\346\001\002\000\004\007\360\001" +
    "\002\000\004\007\356\001\002\000\004\007\354\001\002" +
    "\000\004\007\352\001\002\000\046\005\uffcd\010\353\016" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\027\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\042" +
    "\uffcd\057\uffcd\060\uffcd\001\002\000\044\005\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\027\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce" +
    "\057\uffce\060\uffce\001\002\000\046\005\uffd3\010\355\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\027\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\042" +
    "\uffd3\057\uffd3\060\uffd3\001\002\000\044\005\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\027\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4" +
    "\057\uffd4\060\uffd4\001\002\000\046\005\uffcf\010\357\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\027\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\042" +
    "\uffcf\057\uffcf\060\uffcf\001\002\000\044\005\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\027\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0" +
    "\057\uffd0\060\uffd0\001\002\000\046\005\uffd1\010\361\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\027\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\042" +
    "\uffd1\057\uffd1\060\uffd1\001\002\000\044\005\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\027\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\042\uffd2" +
    "\057\uffd2\060\uffd2\001\002\000\004\016\363\001\002\000" +
    "\004\007\364\001\002\000\004\004\365\001\002\000\006" +
    "\035\371\036\366\001\002\000\004\013\u0108\001\002\000" +
    "\010\005\uffca\035\uffca\036\uffca\001\002\000\010\005\u0107" +
    "\035\371\036\366\001\002\000\012\016\375\022\373\023" +
    "\374\024\372\001\002\000\004\013\u0104\001\002\000\004" +
    "\013\u0102\001\002\000\004\013\u0100\001\002\000\004\013" +
    "\376\001\002\000\036\016\123\017\026\020\032\021\040" +
    "\027\114\031\126\032\107\033\116\034\110\037\122\040" +
    "\112\042\030\057\102\060\103\001\002\000\044\005\uffc8" +
    "\016\123\017\026\020\032\021\040\027\114\031\126\032" +
    "\107\033\116\034\110\035\uffc8\036\uffc8\037\122\040\112" +
    "\042\030\057\102\060\103\001\002\000\036\016\123\017" +
    "\026\020\032\021\040\027\114\031\126\032\107\033\116" +
    "\034\110\037\122\040\112\042\030\057\102\060\103\001" +
    "\002\000\044\005\uffc6\016\123\017\026\020\032\021\040" +
    "\027\114\031\126\032\107\033\116\034\110\035\uffc6\036" +
    "\uffc6\037\122\040\112\042\030\057\102\060\103\001\002" +
    "\000\036\016\123\017\026\020\032\021\040\027\114\031" +
    "\126\032\107\033\116\034\110\037\122\040\112\042\030" +
    "\057\102\060\103\001\002\000\044\005\uffc7\016\123\017" +
    "\026\020\032\021\040\027\114\031\126\032\107\033\116" +
    "\034\110\035\uffc7\036\uffc7\037\122\040\112\042\030\057" +
    "\102\060\103\001\002\000\036\016\123\017\026\020\032" +
    "\021\040\027\114\031\126\032\107\033\116\034\110\037" +
    "\122\040\112\042\030\057\102\060\103\001\002\000\044" +
    "\005\uffc9\016\123\017\026\020\032\021\040\027\114\031" +
    "\126\032\107\033\116\034\110\035\uffc9\036\uffc9\037\122" +
    "\040\112\042\030\057\102\060\103\001\002\000\010\005" +
    "\uffcb\035\uffcb\036\uffcb\001\002\000\044\005\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\027\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc" +
    "\057\uffcc\060\uffcc\001\002\000\036\016\123\017\026\020" +
    "\032\021\040\027\114\031\126\032\107\033\116\034\110" +
    "\037\122\040\112\042\030\057\102\060\103\001\002\000" +
    "\044\005\uffc5\016\123\017\026\020\032\021\040\027\114" +
    "\031\126\032\107\033\116\034\110\035\uffc5\036\uffc5\037" +
    "\122\040\112\042\030\057\102\060\103\001\002\000\014" +
    "\016\142\022\143\023\141\024\140\045\u010c\001\002\000" +
    "\004\007\u0114\001\002\000\004\006\u010d\001\002\000\012" +
    "\016\142\022\143\023\141\024\140\001\002\000\004\007" +
    "\u010f\001\002\000\004\007\u0110\001\002\000\004\004\u0111" +
    "\001\002\000\036\016\123\017\026\020\032\021\040\027" +
    "\114\031\126\032\107\033\116\034\110\037\122\040\112" +
    "\042\030\057\102\060\103\001\002\000\040\005\u0113\016" +
    "\123\017\026\020\032\021\040\027\114\031\126\032\107" +
    "\033\116\034\110\037\122\040\112\042\030\057\102\060" +
    "\103\001\002\000\044\005\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\042\uffbf\057\uffbf\060\uffbf" +
    "\001\002\000\004\004\u0115\001\002\000\036\016\123\017" +
    "\026\020\032\021\040\027\114\031\126\032\107\033\116" +
    "\034\110\037\122\040\112\042\030\057\102\060\103\001" +
    "\002\000\040\005\u0117\016\123\017\026\020\032\021\040" +
    "\027\114\031\126\032\107\033\116\034\110\037\122\040" +
    "\112\042\030\057\102\060\103\001\002\000\044\005\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\027\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\042\uffc0\057\uffc0\060\uffc0\001\002\000\022\005\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\042\uffee\057\uffee\060\uffee" +
    "\001\002\000\006\007\uffa0\012\uffa0\001\002\000\036\016" +
    "\123\017\026\020\032\021\040\027\114\031\126\032\107" +
    "\033\116\034\110\037\122\040\112\042\030\057\102\060" +
    "\103\001\002\000\040\005\u011c\016\123\017\026\020\032" +
    "\021\040\027\114\031\126\032\107\033\116\034\110\037" +
    "\122\040\112\042\030\057\102\060\103\001\002\000\022" +
    "\005\uffed\016\uffed\017\uffed\020\uffed\021\uffed\042\uffed\057" +
    "\uffed\060\uffed\001\002\000\050\005\uff93\010\u011f\011\u011e" +
    "\016\uff93\017\uff93\020\uff93\021\uff93\027\uff93\031\uff93\032" +
    "\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93" +
    "\042\uff93\057\uff93\060\uff93\001\002\000\020\016\u0122\022" +
    "\060\023\056\024\053\025\051\026\052\042\u0120\001\002" +
    "\000\044\005\uff92\016\uff92\017\uff92\020\uff92\021\uff92\027" +
    "\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92" +
    "\037\uff92\040\uff92\042\uff92\057\uff92\060\uff92\001\002\000" +
    "\004\006\u0125\001\002\000\046\005\uff99\010\u0124\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\027\uff99\031\uff99\032\uff99\033" +
    "\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\042\uff99" +
    "\057\uff99\060\uff99\001\002\000\004\010\u0123\001\002\000" +
    "\044\005\uff96\016\uff96\017\uff96\020\uff96\021\uff96\027\uff96" +
    "\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\042\uff96\057\uff96\060\uff96\001\002\000\044" +
    "\005\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\027\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\042\uff9a\057\uff9a\060\uff9a\001\002\000\004\022" +
    "\u0126\001\002\000\004\007\u0127\001\002\000\046\005\uffd9" +
    "\010\u0128\016\uffd9\017\uffd9\020\uffd9\021\uffd9\027\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\042\uffd9\057\uffd9\060\uffd9\001\002\000\044\005" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\027\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\042\uffda\057\uffda\060\uffda\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0128\000\012\002\012\003\003\035\010\036\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\u0129" +
    "\035\010\036\004\001\001\000\010\003\u0128\035\010\036" +
    "\004\001\001\000\002\001\001\000\004\036\017\001\001" +
    "\000\010\003\014\035\010\036\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\030\005\022\006\036\007\024\011\035\032\032" +
    "\033\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\041\006\036\007\024\011\035\032" +
    "\032\033\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\074\013\067\001\001" +
    "\000\004\010\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0118\001\001\000\002\001\001\000\034\006\110" +
    "\007\024\014\103\015\126\016\116\022\105\024\123\025" +
    "\112\026\114\031\124\032\120\033\117\034\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\110\007\024\015\175\016\116\022\105\024\123" +
    "\025\112\026\114\031\124\032\120\033\117\034\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\143\020\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\156" +
    "\001\001\000\002\001\001\000\004\017\151\001\001\000" +
    "\004\017\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\154\001\001\000\002\001\001\000\004\017" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\161\001\001\000\002\001\001\000\004\023\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\110\007\024\014\173\015\126" +
    "\016\116\022\105\024\123\025\112\026\114\031\124\032" +
    "\120\033\117\034\104\001\001\000\032\006\110\007\024" +
    "\015\175\016\116\022\105\024\123\025\112\026\114\031" +
    "\124\032\120\033\117\034\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\143\020\177\001\001\000" +
    "\002\001\001\000\004\023\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\110\007\024\014\204\015" +
    "\126\016\116\022\105\024\123\025\112\026\114\031\124" +
    "\032\120\033\117\034\104\001\001\000\032\006\110\007" +
    "\024\015\175\016\116\022\105\024\123\025\112\026\114" +
    "\031\124\032\120\033\117\034\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\143\020\213\001\001\000" +
    "\002\001\001\000\004\023\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\110\007\024\014\220\015" +
    "\126\016\116\022\105\024\123\025\112\026\114\031\124" +
    "\032\120\033\117\034\104\001\001\000\032\006\110\007" +
    "\024\015\175\016\116\022\105\024\123\025\112\026\114" +
    "\031\124\032\120\033\117\034\104\001\001\000\002\001" +
    "\001\000\006\017\143\020\223\001\001\000\002\001\001" +
    "\000\004\023\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\110\007\024\014\230\015\126\016\116" +
    "\022\105\024\123\025\112\026\114\031\124\032\120\033" +
    "\117\034\104\001\001\000\032\006\110\007\024\015\175" +
    "\016\116\022\105\024\123\025\112\026\114\031\124\032" +
    "\120\033\117\034\104\001\001\000\002\001\001\000\006" +
    "\012\234\013\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\110\007\024\014\241\015\126\016\116\022" +
    "\105\024\123\025\112\026\114\031\124\032\120\033\117" +
    "\034\104\001\001\000\032\006\110\007\024\015\175\016" +
    "\116\022\105\024\123\025\112\026\114\031\124\032\120" +
    "\033\117\034\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\143\020\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\143\020\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\143\020\257\001\001\000\004\021\260\001\001\000\006" +
    "\017\143\020\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\110\007\024\014\270\015" +
    "\126\016\116\022\105\024\123\025\112\026\114\031\124" +
    "\032\120\033\117\034\104\001\001\000\032\006\110\007" +
    "\024\015\175\016\116\022\105\024\123\025\112\026\114" +
    "\031\124\032\120\033\117\034\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\110\007\024\014\311" +
    "\015\126\016\116\022\105\024\123\025\112\026\114\031" +
    "\124\032\120\033\117\034\104\001\001\000\002\001\001" +
    "\000\006\017\143\020\276\001\001\000\004\021\277\001" +
    "\001\000\006\017\143\020\304\001\001\000\002\001\001" +
    "\000\034\006\110\007\024\014\302\015\126\016\116\022" +
    "\105\024\123\025\112\026\114\031\124\032\120\033\117" +
    "\034\104\001\001\000\032\006\110\007\024\015\175\016" +
    "\116\022\105\024\123\025\112\026\114\031\124\032\120" +
    "\033\117\034\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\110\007\024\014\307" +
    "\015\126\016\116\022\105\024\123\025\112\026\114\031" +
    "\124\032\120\033\117\034\104\001\001\000\032\006\110" +
    "\007\024\015\175\016\116\022\105\024\123\025\112\026" +
    "\114\031\124\032\120\033\117\034\104\001\001\000\002" +
    "\001\001\000\032\006\110\007\024\015\175\016\116\022" +
    "\105\024\123\025\112\026\114\031\124\032\120\033\117" +
    "\034\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\110\007\024" +
    "\014\317\015\126\016\116\022\105\024\123\025\112\026" +
    "\114\031\124\032\120\033\117\034\104\001\001\000\032" +
    "\006\110\007\024\015\175\016\116\022\105\024\123\025" +
    "\112\026\114\031\124\032\120\033\117\034\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\110\007" +
    "\024\014\340\015\126\016\116\022\105\024\123\025\112" +
    "\026\114\031\124\032\120\033\117\034\104\001\001\000" +
    "\002\001\001\000\006\017\143\020\325\001\001\000\004" +
    "\021\326\001\001\000\006\017\143\020\333\001\001\000" +
    "\002\001\001\000\034\006\110\007\024\014\331\015\126" +
    "\016\116\022\105\024\123\025\112\026\114\031\124\032" +
    "\120\033\117\034\104\001\001\000\032\006\110\007\024" +
    "\015\175\016\116\022\105\024\123\025\112\026\114\031" +
    "\124\032\120\033\117\034\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\110\007" +
    "\024\014\336\015\126\016\116\022\105\024\123\025\112" +
    "\026\114\031\124\032\120\033\117\034\104\001\001\000" +
    "\032\006\110\007\024\015\175\016\116\022\105\024\123" +
    "\025\112\026\114\031\124\032\120\033\117\034\104\001" +
    "\001\000\002\001\001\000\032\006\110\007\024\015\175" +
    "\016\116\022\105\024\123\025\112\026\114\031\124\032" +
    "\120\033\117\034\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\367\030\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u0105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\110\007" +
    "\024\014\376\015\126\016\116\022\105\024\123\025\112" +
    "\026\114\031\124\032\120\033\117\034\104\001\001\000" +
    "\032\006\110\007\024\015\175\016\116\022\105\024\123" +
    "\025\112\026\114\031\124\032\120\033\117\034\104\001" +
    "\001\000\034\006\110\007\024\014\u0100\015\126\016\116" +
    "\022\105\024\123\025\112\026\114\031\124\032\120\033" +
    "\117\034\104\001\001\000\032\006\110\007\024\015\175" +
    "\016\116\022\105\024\123\025\112\026\114\031\124\032" +
    "\120\033\117\034\104\001\001\000\034\006\110\007\024" +
    "\014\u0102\015\126\016\116\022\105\024\123\025\112\026" +
    "\114\031\124\032\120\033\117\034\104\001\001\000\032" +
    "\006\110\007\024\015\175\016\116\022\105\024\123\025" +
    "\112\026\114\031\124\032\120\033\117\034\104\001\001" +
    "\000\034\006\110\007\024\014\u0104\015\126\016\116\022" +
    "\105\024\123\025\112\026\114\031\124\032\120\033\117" +
    "\034\104\001\001\000\032\006\110\007\024\015\175\016" +
    "\116\022\105\024\123\025\112\026\114\031\124\032\120" +
    "\033\117\034\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\110\007\024\014\u0108\015\126\016\116" +
    "\022\105\024\123\025\112\026\114\031\124\032\120\033" +
    "\117\034\104\001\001\000\032\006\110\007\024\015\175" +
    "\016\116\022\105\024\123\025\112\026\114\031\124\032" +
    "\120\033\117\034\104\001\001\000\006\017\143\020\u010a" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\143\020\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\110\007\024\014\u0111\015" +
    "\126\016\116\022\105\024\123\025\112\026\114\031\124" +
    "\032\120\033\117\034\104\001\001\000\032\006\110\007" +
    "\024\015\175\016\116\022\105\024\123\025\112\026\114" +
    "\031\124\032\120\033\117\034\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\110\007\024\014\u0115" +
    "\015\126\016\116\022\105\024\123\025\112\026\114\031" +
    "\124\032\120\033\117\034\104\001\001\000\032\006\110" +
    "\007\024\015\175\016\116\022\105\024\123\025\112\026" +
    "\114\031\124\032\120\033\117\034\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\110\007\024\014\u011a\015\126\016\116\022\105\024\123" +
    "\025\112\026\114\031\124\032\120\033\117\034\104\001" +
    "\001\000\032\006\110\007\024\015\175\016\116\022\105" +
    "\024\123\025\112\026\114\031\124\032\120\033\117\034" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u0120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String archivo_name = Interfaz.PrincipalW.flagJS;
    public static ArrayList<Comentario> listaComentario = new ArrayList<Comentario>();
    public static ArrayList<Variables> listaVariable = new ArrayList<Variables>();
    public static ArrayList<Clase_> listaClase = new ArrayList<Clase_>();
    public static ArrayList<Metodo> listaMetodo = new ArrayList<Metodo>();
    
    public ArrayList<String> naMetodo = new ArrayList<String>(); 
    public ArrayList<String> liParam = new ArrayList<String>(); 
    private int contlin = 0;
    private String nameClase, naMeto;



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Interfaz.PrincipalW.listaError.add(new ErroresF(s.value.toString(),"Error sintactico no se esperaba "+s.value.toString(),String.valueOf(s.left), String.valueOf(s.right), archivo_name ));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        Interfaz.PrincipalW.listaError.add(new ErroresF(s.value.toString(),"Error sintactico no se esperaba "+s.value.toString(),String.valueOf(s.left), String.valueOf(s.right), archivo_name ));
    }  
    public void saveClase(){
        listaClase.add(new Clase_(archivo_name,nameClase,naMetodo, String.valueOf(contlin)));
        nameClase = "";
        naMetodo.clear();
        contlin = 0;
        
    }
    public void saveMetodo(){
        listaMetodo.add(new Metodo(archivo_name,naMeto,liParam, String.valueOf(contlin)));
        naMeto = "";
        liParam.clear();
        contlin = 0;
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoJS$actions {
  private final SintacticoJS parser;

  /** Constructor */
  CUP$SintacticoJS$actions(SintacticoJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action_part00000000(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJS$parser.done_parsing();
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= COMENTUNO instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).value;
		contlin++;listaComentario.add(new Comentario(archivo_name, a.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= COMENTMUL instrucciones 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).value;
		listaComentario.add(new Comentario(archivo_name, b.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= multiclas 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= error LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // multiclas ::= multiclas multiclass 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("multiclas",27, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // multiclas ::= multiclass 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("multiclas",27, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // multiclass ::= CLASS IDENTIFI LLAIZQ contenido LLADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).value;
		nameClase = a; contlin++; saveClase();
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("multiclass",28, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenido ::= contenido relleno 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contenido",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenido ::= relleno 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contenido",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // relleno ::= variables 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // relleno ::= metodo 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // relleno ::= callmetodo 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // relleno ::= importacion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // relleno ::= COMENTUNO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.peek()).value;
		listaComentario.add(new Comentario(archivo_name, a.toString()));
contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // relleno ::= COMENTMUL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.peek()).value;
		listaComentario.add(new Comentario(archivo_name, b.toString()));
contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // metodo ::= IDENTIFI PARIZQ paramet PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).value;
		naMetodo.add(a.toString());
naMeto = a;
contlin++;
saveMetodo();
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("metodo",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // metodo ::= IDENTIFI PARIZQ PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)).value;
		naMetodo.add(a.toString());
naMeto = a;
contlin++;
saveMetodo();
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("metodo",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contmet ::= contmet contmett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmet",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // contmet ::= contmett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmet",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // contmett ::= variables 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contmett ::= sentencia 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contmett ::= ciclofor 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // contmett ::= ciclowhile 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contmett ::= ciclodowhile 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contmett ::= sentswitch 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contmett ::= consola 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contmett ::= callmetodo 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contmett ::= importacion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contmett ::= quebrar 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // contmett ::= COMENTUNO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.peek()).value;
		listaComentario.add(new Comentario(archivo_name, a.toString()));
contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // contmett ::= COMENTMUL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.peek()).value;
		listaComentario.add(new Comentario(archivo_name, b.toString()));
contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // callmetodo ::= IDENTIFI PARIZQ paramet PARDER PTCOMA 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // callmetodo ::= IDENTIFI PARIZQ paramet PARDER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // callmetodo ::= IDENTIFI PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // callmetodo ::= IDENTIFI PARIZQ PARDER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // importacion ::= tipovar IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).value;
		listaVariable.add(new Variables(archivo_name, a.toString())); contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // importacion ::= tipovar IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)).value;
		listaVariable.add(new Variables(archivo_name, a.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // importacion ::= IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)).value;
		listaVariable.add(new Variables(archivo_name, a.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // importacion ::= IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)).value;
		listaVariable.add(new Variables(archivo_name, a.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // importacion ::= REQUIRE PARIZQ CADENA PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // importacion ::= REQUIRE PARIZQ CADENA PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // consola ::= CONSOLE PUNTO LOG PARIZQ CADENA PARDER PTCOMA 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // consola ::= CONSOLE PUNTO LOG PARIZQ CADENA PARDER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // consola ::= CONSOLE PUNTO LOG PARIZQ DECIMAL PARDER PTCOMA 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // consola ::= CONSOLE PUNTO LOG PARIZQ DECIMAL PARDER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // consola ::= CONSOLE PUNTO LOG PARIZQ ENTERO PARDER PTCOMA 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // consola ::= CONSOLE PUNTO LOG PARIZQ ENTERO PARDER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // consola ::= CONSOLE PUNTO LOG PARIZQ IDENTIFI PARDER PTCOMA 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // consola ::= CONSOLE PUNTO LOG PARIZQ IDENTIFI PARDER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentswitch ::= SWITCH PARIZQ IDENTIFI PARDER LLAIZQ contswitch LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentswitch",20, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contswitch ::= contswitch contswitchh 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitch",21, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contswitch ::= contswitchh 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitch",21, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contswitchh ::= CASE DECIMAL DOSPT contmet 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contswitchh ::= CASE IDENTIFI DOSPT contmet 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contswitchh ::= CASE CADENA DOSPT contmet 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // contswitchh ::= CASE ENTERO DOSPT contmet 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // contswitchh ::= DEFAULT DOSPT contmet 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ condicion PARDER PTCOMA 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ condicion PARDER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ DIFER PARIZQ condicion PARDER PARDER PTCOMA 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ DIFER PARIZQ condicion PARDER PARDER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ciclowhile ::= WHILE PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclowhile",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ciclowhile ::= WHILE PARIZQ DIFER PARIZQ condicion PARDER PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclowhile",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ciclofor ::= FOR PARIZQ tipovar IDENTIFI IGUAL ENTERO PTCOMA condicion PTCOMA incremento PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclofor",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ciclofor ::= FOR PARIZQ tipovar IDENTIFI IGUAL IDENTIFI PTCOMA condicion PTCOMA incremento PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclofor",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ciclofor ::= FOR PARIZQ IDENTIFI IGUAL ENTERO PTCOMA condicion PTCOMA incremento PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclofor",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ciclofor ::= FOR PARIZQ IDENTIFI IGUAL IDENTIFI PTCOMA condicion PTCOMA incremento PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclofor",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // incremento ::= IDENTIFI MAS MAS 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("incremento",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // incremento ::= IDENTIFI MENOS MENOS 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("incremento",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER ELSE LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER ELSE LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // opelog ::= AND AND 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("opelog",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // opelog ::= OR OR 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("opelog",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // opelog ::= DIFER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("opelog",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // opelog ::= DIFER IGUAL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("opelog",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= IDENTIFI 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= ENTERO 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= CADENA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // condicion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicion ::= expresion MAYOR IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // condicion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicion ::= expresion MENOR IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // condicion ::= expresion IGUAL IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condicion ::= expresion DIFER IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // quebrar ::= BREAK 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("quebrar",26, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // quebrar ::= BREAK PTCOMA 
            {
              Object RESULT =null;
		contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("quebrar",26, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // paramet ::= paramet COMA paramett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramet",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // paramet ::= paramett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramet",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // paramett ::= IDENTIFI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.peek()).value;
		liParam.add(a.toString());
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // paramett ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.peek()).value;
		liParam.add(a.toString());
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // paramett ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.peek()).value;
		liParam.add(a.toString());
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // paramett ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.peek()).value;
		liParam.add(a.toString());
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variables ::= tipovar IDENTIFI IGUAL valuevar PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).value;
		listaVariable.add(new Variables(archivo_name, a.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variables ::= tipovar IDENTIFI IGUAL valuevar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).value;
		listaVariable.add(new Variables(archivo_name, a.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variables ::= IDENTIFI IGUAL valuevar PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).value;
		listaVariable.add(new Variables(archivo_name, a.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // variables ::= IDENTIFI IGUAL valuevar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).value;
		listaVariable.add(new Variables(archivo_name, a.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // variables ::= tipovar IDENTIFI IGUAL IDENTIFI PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).value;
		listaVariable.add(new Variables(archivo_name, a.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // variables ::= IDENTIFI IGUAL IDENTIFI PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)).value;
		listaVariable.add(new Variables(archivo_name, a.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // variables ::= IDENTIFI IGUAL IDENTIFI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)).value;
		listaVariable.add(new Variables(archivo_name, a.toString()));contlin++;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // variables ::= tipovar IDENTIFI 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // variables ::= tipovar IDENTIFI PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipovar ::= VAR 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("tipovar",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipovar ::= LET 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("tipovar",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipovar ::= CONST 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("tipovar",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valuevar ::= ENTERO 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valuevar ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valuevar ::= CADENA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valuevar ::= TRUE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valuevar ::= FALSE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoJS$do_action_part00000000(
                               CUP$SintacticoJS$act_num,
                               CUP$SintacticoJS$parser,
                               CUP$SintacticoJS$stack,
                               CUP$SintacticoJS$top);
    }
}

}
