
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadoresJS;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\010\000\002\003\007" +
    "\000\002\004\004\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\011\011\000\002\011\010\000\002\014\004\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\032\007\000\002\032\006\000\002\032" +
    "\006\000\002\032\005\000\002\033\012\000\002\033\011" +
    "\000\002\033\011\000\002\033\010\000\002\031\011\000" +
    "\002\031\010\000\002\031\011\000\002\031\010\000\002" +
    "\031\011\000\002\031\010\000\002\031\011\000\002\031" +
    "\010\000\002\035\005\000\002\035\003\000\002\026\011" +
    "\000\002\027\004\000\002\027\003\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\030\006\000\002" +
    "\030\005\000\002\025\013\000\002\025\012\000\002\025" +
    "\016\000\002\025\015\000\002\024\011\000\002\024\014" +
    "\000\002\022\020\000\002\022\017\000\002\023\005\000" +
    "\002\023\005\000\002\016\011\000\002\016\015\000\002" +
    "\016\021\000\002\016\013\000\002\016\017\000\002\016" +
    "\023\000\002\016\023\000\002\016\025\000\002\021\004" +
    "\000\002\021\004\000\002\021\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\005\000\002\020\006\000\002\020\005\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\034\003" +
    "\000\002\034\004\000\002\012\005\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\006\007\000\002\006\006\000\002\006" +
    "\006\000\002\006\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\006\003\005\015\006\001\002\000\004\002" +
    "\000\001\002\000\006\002\ufffe\015\006\001\002\000\004" +
    "\016\011\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\004\012\001\002\000\012\016\017" +
    "\017\016\020\021\021\025\001\002\000\014\005\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\001\002\000\014\005\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\001\002\000\004\016" +
    "\370\001\002\000\004\016\uffa2\001\002\000\006\006\032" +
    "\011\031\001\002\000\014\005\026\016\017\017\016\020" +
    "\021\021\025\001\002\000\004\016\uffa1\001\002\000\014" +
    "\005\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\001\002\000" +
    "\014\005\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\001\002" +
    "\000\014\005\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\001" +
    "\002\000\004\016\uffa0\001\002\000\006\002\ufffc\015\006" +
    "\001\002\000\014\005\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\001\002\000\004\002\ufffd\001\002\000\016\022\362" +
    "\023\361\024\356\025\354\026\355\042\357\001\002\000" +
    "\014\007\033\016\036\022\037\023\041\024\034\001\002" +
    "\000\020\004\351\005\uffe4\010\157\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\001\002\000\006\007\uffa9\012\uffa9\001\002" +
    "\000\006\007\uffab\012\uffab\001\002\000\006\007\uffaa\012" +
    "\uffaa\001\002\000\006\007\uffa7\012\uffa7\001\002\000\006" +
    "\007\043\012\042\001\002\000\006\007\uffa8\012\uffa8\001" +
    "\002\000\012\016\036\022\037\023\041\024\034\001\002" +
    "\000\020\004\044\005\uffe6\010\045\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\001\002\000\030\016\065\017\016\020\021" +
    "\021\025\027\055\031\070\032\051\033\060\034\052\037" +
    "\063\040\054\001\002\000\036\005\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\027\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\001\002\000\032" +
    "\005\347\016\065\017\016\020\021\021\025\027\055\031" +
    "\070\032\051\033\060\034\052\037\063\040\054\001\002" +
    "\000\036\005\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\027" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\001\002\000\036\005\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\027\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\001\002\000" +
    "\004\006\331\001\002\000\004\006\301\001\002\000\036" +
    "\005\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\027\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\001\002\000\004\014\262\001\002\000\004\006" +
    "\177\001\002\000\036\005\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\027\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\001\002\000\036\005\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\027\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\001\002\000\004\004\161\001\002\000\036\005\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\027\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\001" +
    "\002\000\036\005\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\027\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\001\002\000\040\005\uffae\010\160" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\027\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\001\002\000\036\005\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\027\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\001\002\000\006\006\153\011" +
    "\031\001\002\000\036\005\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\027\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\001\002\000\036\005\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\027\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\001\002\000\004\006\072\001\002\000\036\005\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\027\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\001" +
    "\002\000\012\016\074\017\016\020\021\021\025\001\002" +
    "\000\004\016\140\001\002\000\004\011\075\001\002\000" +
    "\004\023\076\001\002\000\004\010\077\001\002\000\012" +
    "\016\103\022\104\023\102\024\101\001\002\000\004\010" +
    "\124\001\002\000\022\007\uffb7\010\uffb7\011\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\047\uffb7\001\002\000\022\007" +
    "\uffb6\010\uffb6\011\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\001\002\000\022\007\uffb8\010\uffb8\011\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\001\002\000\022" +
    "\007\uffb5\010\uffb5\011\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\001\002\000\012\011\106\043\110\044\107" +
    "\045\111\001\002\000\004\011\122\001\002\000\014\011" +
    "\117\016\103\022\104\023\102\024\101\001\002\000\014" +
    "\011\114\016\103\022\104\023\102\024\101\001\002\000" +
    "\004\011\112\001\002\000\012\016\103\022\104\023\102" +
    "\024\101\001\002\000\014\007\uffaf\010\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\001\002\000\012\016\103\022\104\023\102" +
    "\024\101\001\002\000\014\007\uffb4\010\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\001\002\000\014\007\uffb3\010\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\001\002\000\012\016\103\022\104\023" +
    "\102\024\101\001\002\000\014\007\uffb2\010\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\001\002\000\014\007\uffb1\010\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\001\002\000\012\016\103\022\104" +
    "\023\102\024\101\001\002\000\014\007\uffb0\010\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\001\002\000\004\016\126\001\002" +
    "\000\004\007\133\001\002\000\006\050\127\051\130\001" +
    "\002\000\004\050\132\001\002\000\004\051\131\001\002" +
    "\000\004\007\uffc4\001\002\000\004\007\uffc5\001\002\000" +
    "\004\004\134\001\002\000\030\016\065\017\016\020\021" +
    "\021\025\027\055\031\070\032\051\033\060\034\052\037" +
    "\063\040\054\001\002\000\032\005\136\016\065\017\016" +
    "\020\021\021\025\027\055\031\070\032\051\033\060\034" +
    "\052\037\063\040\054\001\002\000\036\005\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\027\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\001\002" +
    "\000\036\005\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\027" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\001\002\000\004\011\141\001\002\000" +
    "\004\023\142\001\002\000\004\010\143\001\002\000\012" +
    "\016\103\022\104\023\102\024\101\001\002\000\004\010" +
    "\145\001\002\000\004\016\126\001\002\000\004\007\147" +
    "\001\002\000\004\004\150\001\002\000\030\016\065\017" +
    "\016\020\021\021\025\027\055\031\070\032\051\033\060" +
    "\034\052\037\063\040\054\001\002\000\032\005\152\016" +
    "\065\017\016\020\021\021\025\027\055\031\070\032\051" +
    "\033\060\034\052\037\063\040\054\001\002\000\036\005" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\027\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\001\002\000\014\007\154\016\036\022\037\023\041" +
    "\024\034\001\002\000\040\005\uffe4\010\157\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002\000" +
    "\006\007\156\012\042\001\002\000\040\005\uffe6\010\045" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\027\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\001\002\000\036\005\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\001\002\000\036\005\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\027\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\001" +
    "\002\000\030\016\065\017\016\020\021\021\025\027\055" +
    "\031\070\032\051\033\060\034\052\037\063\040\054\001" +
    "\002\000\032\005\163\016\065\017\016\020\021\021\025" +
    "\027\055\031\070\032\051\033\060\034\052\037\063\040" +
    "\054\001\002\000\004\032\164\001\002\000\004\006\165" +
    "\001\002\000\014\016\103\022\104\023\102\024\101\045" +
    "\167\001\002\000\004\007\175\001\002\000\004\006\170" +
    "\001\002\000\012\016\103\022\104\023\102\024\101\001" +
    "\002\000\004\007\172\001\002\000\004\007\173\001\002" +
    "\000\040\005\uffca\010\174\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\027\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\001\002\000\036\005\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\027\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\001" +
    "\002\000\040\005\uffcc\010\176\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\001\002\000\036\005\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\027\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\001\002\000\012\016\103\022\104\023\102\024\101\001" +
    "\002\000\012\007\203\045\204\046\202\047\205\001\002" +
    "\000\012\016\103\022\104\023\102\024\101\001\002\000" +
    "\004\046\233\001\002\000\004\004\207\001\002\000\012" +
    "\016\uffb9\022\uffb9\023\uffb9\024\uffb9\001\002\000\004\047" +
    "\206\001\002\000\012\016\uffba\022\uffba\023\uffba\024\uffba" +
    "\001\002\000\030\016\065\017\016\020\021\021\025\027" +
    "\055\031\070\032\051\033\060\034\052\037\063\040\054" +
    "\001\002\000\032\005\211\016\065\017\016\020\021\021" +
    "\025\027\055\031\070\032\051\033\060\034\052\037\063" +
    "\040\054\001\002\000\040\005\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\027\uffc3\030\212\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\001\002\000" +
    "\006\004\213\027\214\001\002\000\030\016\065\017\016" +
    "\020\021\021\025\027\055\031\070\032\051\033\060\034" +
    "\052\037\063\040\054\001\002\000\004\006\215\001\002" +
    "\000\012\016\103\022\104\023\102\024\101\001\002\000" +
    "\012\007\220\045\204\046\202\047\205\001\002\000\012" +
    "\016\103\022\104\023\102\024\101\001\002\000\004\004" +
    "\221\001\002\000\030\016\065\017\016\020\021\021\025" +
    "\027\055\031\070\032\051\033\060\034\052\037\063\040" +
    "\054\001\002\000\032\005\223\016\065\017\016\020\021" +
    "\021\025\027\055\031\070\032\051\033\060\034\052\037" +
    "\063\040\054\001\002\000\036\005\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\001\002\000\004" +
    "\007\225\001\002\000\004\004\226\001\002\000\030\016" +
    "\065\017\016\020\021\021\025\027\055\031\070\032\051" +
    "\033\060\034\052\037\063\040\054\001\002\000\032\005" +
    "\230\016\065\017\016\020\021\021\025\027\055\031\070" +
    "\032\051\033\060\034\052\037\063\040\054\001\002\000" +
    "\036\005\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\027\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\001\002\000\032\005\232\016\065\017\016" +
    "\020\021\021\025\027\055\031\070\032\051\033\060\034" +
    "\052\037\063\040\054\001\002\000\036\005\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\027\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\001\002" +
    "\000\012\016\uffbb\022\uffbb\023\uffbb\024\uffbb\001\002\000" +
    "\004\007\235\001\002\000\004\004\236\001\002\000\030" +
    "\016\065\017\016\020\021\021\025\027\055\031\070\032" +
    "\051\033\060\034\052\037\063\040\054\001\002\000\032" +
    "\005\240\016\065\017\016\020\021\021\025\027\055\031" +
    "\070\032\051\033\060\034\052\037\063\040\054\001\002" +
    "\000\040\005\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\027" +
    "\uffc0\030\241\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\001\002\000\006\004\242\027" +
    "\243\001\002\000\030\016\065\017\016\020\021\021\025" +
    "\027\055\031\070\032\051\033\060\034\052\037\063\040" +
    "\054\001\002\000\004\006\244\001\002\000\012\016\103" +
    "\022\104\023\102\024\101\001\002\000\012\007\247\045" +
    "\204\046\202\047\205\001\002\000\012\016\103\022\104" +
    "\023\102\024\101\001\002\000\004\004\250\001\002\000" +
    "\030\016\065\017\016\020\021\021\025\027\055\031\070" +
    "\032\051\033\060\034\052\037\063\040\054\001\002\000" +
    "\032\005\252\016\065\017\016\020\021\021\025\027\055" +
    "\031\070\032\051\033\060\034\052\037\063\040\054\001" +
    "\002\000\036\005\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\027\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\001\002\000\004\007\254\001\002" +
    "\000\004\004\255\001\002\000\030\016\065\017\016\020" +
    "\021\021\025\027\055\031\070\032\051\033\060\034\052" +
    "\037\063\040\054\001\002\000\032\005\257\016\065\017" +
    "\016\020\021\021\025\027\055\031\070\032\051\033\060" +
    "\034\052\037\063\040\054\001\002\000\036\005\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\027\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\001" +
    "\002\000\032\005\261\016\065\017\016\020\021\021\025" +
    "\027\055\031\070\032\051\033\060\034\052\037\063\040" +
    "\054\001\002\000\036\005\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\001\002\000\004\041\263" +
    "\001\002\000\004\006\264\001\002\000\012\016\270\022" +
    "\267\023\266\024\265\001\002\000\004\007\277\001\002" +
    "\000\004\007\275\001\002\000\004\007\273\001\002\000" +
    "\004\007\271\001\002\000\040\005\uffd8\010\272\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\027\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\001\002" +
    "\000\036\005\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\027" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\001\002\000\040\005\uffde\010\274\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\027\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\001" +
    "\002\000\036\005\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\027\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\001\002\000\040\005\uffda\010\276" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\027\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\001\002\000\036\005\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\001\002\000\040\005\uffdc\010" +
    "\300\016\uffdc\017\uffdc\020\uffdc\021\uffdc\027\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\001\002\000\036\005\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\001\002\000\004\016\302" +
    "\001\002\000\004\007\303\001\002\000\004\004\304\001" +
    "\002\000\006\035\310\036\305\001\002\000\004\013\327" +
    "\001\002\000\010\005\uffd3\035\uffd3\036\uffd3\001\002\000" +
    "\010\005\326\035\310\036\305\001\002\000\012\016\313" +
    "\022\314\023\312\024\311\001\002\000\004\013\323\001" +
    "\002\000\004\013\321\001\002\000\004\013\317\001\002" +
    "\000\004\013\315\001\002\000\030\016\065\017\016\020" +
    "\021\021\025\027\055\031\070\032\051\033\060\034\052" +
    "\037\063\040\054\001\002\000\036\005\uffd0\016\065\017" +
    "\016\020\021\021\025\027\055\031\070\032\051\033\060" +
    "\034\052\035\uffd0\036\uffd0\037\063\040\054\001\002\000" +
    "\030\016\065\017\016\020\021\021\025\027\055\031\070" +
    "\032\051\033\060\034\052\037\063\040\054\001\002\000" +
    "\036\005\uffd1\016\065\017\016\020\021\021\025\027\055" +
    "\031\070\032\051\033\060\034\052\035\uffd1\036\uffd1\037" +
    "\063\040\054\001\002\000\030\016\065\017\016\020\021" +
    "\021\025\027\055\031\070\032\051\033\060\034\052\037" +
    "\063\040\054\001\002\000\036\005\uffcf\016\065\017\016" +
    "\020\021\021\025\027\055\031\070\032\051\033\060\034" +
    "\052\035\uffcf\036\uffcf\037\063\040\054\001\002\000\030" +
    "\016\065\017\016\020\021\021\025\027\055\031\070\032" +
    "\051\033\060\034\052\037\063\040\054\001\002\000\036" +
    "\005\uffd2\016\065\017\016\020\021\021\025\027\055\031" +
    "\070\032\051\033\060\034\052\035\uffd2\036\uffd2\037\063" +
    "\040\054\001\002\000\010\005\uffd4\035\uffd4\036\uffd4\001" +
    "\002\000\036\005\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\001\002\000\030\016\065\017\016" +
    "\020\021\021\025\027\055\031\070\032\051\033\060\034" +
    "\052\037\063\040\054\001\002\000\036\005\uffce\016\065" +
    "\017\016\020\021\021\025\027\055\031\070\032\051\033" +
    "\060\034\052\035\uffce\036\uffce\037\063\040\054\001\002" +
    "\000\014\016\103\022\104\023\102\024\101\045\333\001" +
    "\002\000\004\007\343\001\002\000\004\006\334\001\002" +
    "\000\012\016\103\022\104\023\102\024\101\001\002\000" +
    "\004\007\336\001\002\000\004\007\337\001\002\000\004" +
    "\004\340\001\002\000\030\016\065\017\016\020\021\021" +
    "\025\027\055\031\070\032\051\033\060\034\052\037\063" +
    "\040\054\001\002\000\032\005\342\016\065\017\016\020" +
    "\021\021\025\027\055\031\070\032\051\033\060\034\052" +
    "\037\063\040\054\001\002\000\036\005\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\001\002\000" +
    "\004\004\344\001\002\000\030\016\065\017\016\020\021" +
    "\021\025\027\055\031\070\032\051\033\060\034\052\037" +
    "\063\040\054\001\002\000\032\005\346\016\065\017\016" +
    "\020\021\021\025\027\055\031\070\032\051\033\060\034" +
    "\052\037\063\040\054\001\002\000\036\005\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\027\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\001\002" +
    "\000\014\005\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\001" +
    "\002\000\006\007\uffac\012\uffac\001\002\000\030\016\065" +
    "\017\016\020\021\021\025\027\055\031\070\032\051\033" +
    "\060\034\052\037\063\040\054\001\002\000\032\005\353" +
    "\016\065\017\016\020\021\021\025\027\055\031\070\032" +
    "\051\033\060\034\052\037\063\040\054\001\002\000\014" +
    "\005\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\001\002\000" +
    "\040\005\uff9c\010\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\027\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\001\002\000\040\005\uff9b\010\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\027\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\001\002\000\040\005\uff9e\010\uff9e\016\uff9e\017\uff9e\020" +
    "\uff9e\021\uff9e\027\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\037\uff9e\040\uff9e\001\002\000\004\006" +
    "\364\001\002\000\040\005\uffa3\010\363\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\027\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\001\002\000\040" +
    "\005\uff9f\010\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\027" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\001\002\000\040\005\uff9d\010\uff9d\016" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\027\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\001" +
    "\002\000\036\005\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\027\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\001\002\000\004\022\365\001\002" +
    "\000\004\007\366\001\002\000\040\005\uffe0\010\367\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\027\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\001" +
    "\002\000\036\005\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\001\002\000\004\011\371\001\002" +
    "\000\016\022\362\023\361\024\356\025\354\026\355\042" +
    "\373\001\002\000\040\005\uffa5\010\u0100\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\027\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\001\002\000\004" +
    "\006\374\001\002\000\004\022\375\001\002\000\004\007" +
    "\376\001\002\000\040\005\uffe2\010\377\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000\036" +
    "\005\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\027\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\001\002\000\036\005\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\027\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\006\002\006\003\003\001\001\000\002\001" +
    "\001\000\004\003\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\017\005\012\006\023\007\014\011\022\032\021\033\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\026" +
    "\006\023\007\014\011\022\032\021\033\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\357\001\001" +
    "\000\006\012\037\013\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\347\001\001\000\002\001\001\000\034\006\052\007\014" +
    "\014\045\015\070\016\060\022\047\024\065\025\055\026" +
    "\056\031\066\032\063\033\061\034\046\001\001\000\002" +
    "\001\001\000\032\006\052\007\014\015\136\016\060\022" +
    "\047\024\065\025\055\026\056\031\066\032\063\033\061" +
    "\034\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\104\020\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\117\001" +
    "\001\000\004\017\114\001\001\000\002\001\001\000\004" +
    "\017\112\001\001\000\002\001\001\000\004\017\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\122\001\001\000\002\001\001\000\004\023\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\052\007\014\014\134\015\070\016" +
    "\060\022\047\024\065\025\055\026\056\031\066\032\063" +
    "\033\061\034\046\001\001\000\032\006\052\007\014\015" +
    "\136\016\060\022\047\024\065\025\055\026\056\031\066" +
    "\032\063\033\061\034\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\104\020\143\001\001\000\002\001" +
    "\001\000\004\023\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\052\007\014\014\150\015\070\016" +
    "\060\022\047\024\065\025\055\026\056\031\066\032\063" +
    "\033\061\034\046\001\001\000\032\006\052\007\014\015" +
    "\136\016\060\022\047\024\065\025\055\026\056\031\066" +
    "\032\063\033\061\034\046\001\001\000\002\001\001\000" +
    "\006\012\154\013\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\052\007\014\014\161\015\070\016\060" +
    "\022\047\024\065\025\055\026\056\031\066\032\063\033" +
    "\061\034\046\001\001\000\032\006\052\007\014\015\136" +
    "\016\060\022\047\024\065\025\055\026\056\031\066\032" +
    "\063\033\061\034\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\104\020\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\104\020\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\104\020\177\001\001\000\004\021\200\001\001\000" +
    "\006\017\104\020\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\052\007\014\014\207\015\070\016\060" +
    "\022\047\024\065\025\055\026\056\031\066\032\063\033" +
    "\061\034\046\001\001\000\032\006\052\007\014\015\136" +
    "\016\060\022\047\024\065\025\055\026\056\031\066\032" +
    "\063\033\061\034\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\052\007\014\014\230\015\070\016" +
    "\060\022\047\024\065\025\055\026\056\031\066\032\063" +
    "\033\061\034\046\001\001\000\002\001\001\000\006\017" +
    "\104\020\215\001\001\000\004\021\216\001\001\000\006" +
    "\017\104\020\223\001\001\000\002\001\001\000\034\006" +
    "\052\007\014\014\221\015\070\016\060\022\047\024\065" +
    "\025\055\026\056\031\066\032\063\033\061\034\046\001" +
    "\001\000\032\006\052\007\014\015\136\016\060\022\047" +
    "\024\065\025\055\026\056\031\066\032\063\033\061\034" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\052\007\014\014\226\015\070\016" +
    "\060\022\047\024\065\025\055\026\056\031\066\032\063" +
    "\033\061\034\046\001\001\000\032\006\052\007\014\015" +
    "\136\016\060\022\047\024\065\025\055\026\056\031\066" +
    "\032\063\033\061\034\046\001\001\000\002\001\001\000" +
    "\032\006\052\007\014\015\136\016\060\022\047\024\065" +
    "\025\055\026\056\031\066\032\063\033\061\034\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\052\007\014\014\236\015" +
    "\070\016\060\022\047\024\065\025\055\026\056\031\066" +
    "\032\063\033\061\034\046\001\001\000\032\006\052\007" +
    "\014\015\136\016\060\022\047\024\065\025\055\026\056" +
    "\031\066\032\063\033\061\034\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\052\007\014\014\257" +
    "\015\070\016\060\022\047\024\065\025\055\026\056\031" +
    "\066\032\063\033\061\034\046\001\001\000\002\001\001" +
    "\000\006\017\104\020\244\001\001\000\004\021\245\001" +
    "\001\000\006\017\104\020\252\001\001\000\002\001\001" +
    "\000\034\006\052\007\014\014\250\015\070\016\060\022" +
    "\047\024\065\025\055\026\056\031\066\032\063\033\061" +
    "\034\046\001\001\000\032\006\052\007\014\015\136\016" +
    "\060\022\047\024\065\025\055\026\056\031\066\032\063" +
    "\033\061\034\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\052\007\014\014\255" +
    "\015\070\016\060\022\047\024\065\025\055\026\056\031" +
    "\066\032\063\033\061\034\046\001\001\000\032\006\052" +
    "\007\014\015\136\016\060\022\047\024\065\025\055\026" +
    "\056\031\066\032\063\033\061\034\046\001\001\000\002" +
    "\001\001\000\032\006\052\007\014\015\136\016\060\022" +
    "\047\024\065\025\055\026\056\031\066\032\063\033\061" +
    "\034\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\306\030\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\052\007\014\014\315" +
    "\015\070\016\060\022\047\024\065\025\055\026\056\031" +
    "\066\032\063\033\061\034\046\001\001\000\032\006\052" +
    "\007\014\015\136\016\060\022\047\024\065\025\055\026" +
    "\056\031\066\032\063\033\061\034\046\001\001\000\034" +
    "\006\052\007\014\014\317\015\070\016\060\022\047\024" +
    "\065\025\055\026\056\031\066\032\063\033\061\034\046" +
    "\001\001\000\032\006\052\007\014\015\136\016\060\022" +
    "\047\024\065\025\055\026\056\031\066\032\063\033\061" +
    "\034\046\001\001\000\034\006\052\007\014\014\321\015" +
    "\070\016\060\022\047\024\065\025\055\026\056\031\066" +
    "\032\063\033\061\034\046\001\001\000\032\006\052\007" +
    "\014\015\136\016\060\022\047\024\065\025\055\026\056" +
    "\031\066\032\063\033\061\034\046\001\001\000\034\006" +
    "\052\007\014\014\323\015\070\016\060\022\047\024\065" +
    "\025\055\026\056\031\066\032\063\033\061\034\046\001" +
    "\001\000\032\006\052\007\014\015\136\016\060\022\047" +
    "\024\065\025\055\026\056\031\066\032\063\033\061\034" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\052\007\014\014\327\015\070\016\060\022\047\024" +
    "\065\025\055\026\056\031\066\032\063\033\061\034\046" +
    "\001\001\000\032\006\052\007\014\015\136\016\060\022" +
    "\047\024\065\025\055\026\056\031\066\032\063\033\061" +
    "\034\046\001\001\000\006\017\104\020\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\104\020\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\052\007\014\014\340\015\070\016\060" +
    "\022\047\024\065\025\055\026\056\031\066\032\063\033" +
    "\061\034\046\001\001\000\032\006\052\007\014\015\136" +
    "\016\060\022\047\024\065\025\055\026\056\031\066\032" +
    "\063\033\061\034\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\052\007\014\014\344\015\070\016" +
    "\060\022\047\024\065\025\055\026\056\031\066\032\063" +
    "\033\061\034\046\001\001\000\032\006\052\007\014\015" +
    "\136\016\060\022\047\024\065\025\055\026\056\031\066" +
    "\032\063\033\061\034\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\052\007\014" +
    "\014\351\015\070\016\060\022\047\024\065\025\055\026" +
    "\056\031\066\032\063\033\061\034\046\001\001\000\032" +
    "\006\052\007\014\015\136\016\060\022\047\024\065\025" +
    "\055\026\056\031\066\032\063\033\061\034\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoJS$actions {
  private final SintacticoJS parser;

  /** Constructor */
  CUP$SintacticoJS$actions(SintacticoJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action_part00000000(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJS$parser.done_parsing();
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= CLASS IDENTIFI LLAIZQ contenido LLADER instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= CLASS IDENTIFI LLAIZQ contenido LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // contenido ::= contenido relleno 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contenido",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenido ::= relleno 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contenido",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // relleno ::= variables 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // relleno ::= metodo 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // relleno ::= callmetodo 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // relleno ::= importacion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // metodo ::= IDENTIFI PARIZQ paramet PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("metodo",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodo ::= IDENTIFI PARIZQ PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("metodo",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contmet ::= contmet contmett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmet",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // contmet ::= contmett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmet",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // contmett ::= variables 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // contmett ::= sentencia 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // contmett ::= ciclofor 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contmett ::= ciclowhile 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contmett ::= ciclodowhile 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contmett ::= sentswitch 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // contmett ::= consola 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // contmett ::= callmetodo 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contmett ::= importacion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contmett ::= quebrar 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // callmetodo ::= IDENTIFI PARIZQ paramet PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // callmetodo ::= IDENTIFI PARIZQ paramet PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // callmetodo ::= IDENTIFI PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // callmetodo ::= IDENTIFI PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // importacion ::= tipovar IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // importacion ::= tipovar IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // importacion ::= IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // importacion ::= IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // consola ::= CONSOLE PUNTO LOG PARIZQ CADENA PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // consola ::= CONSOLE PUNTO LOG PARIZQ CADENA PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // consola ::= CONSOLE PUNTO LOG PARIZQ DECIMAL PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // consola ::= CONSOLE PUNTO LOG PARIZQ DECIMAL PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // consola ::= CONSOLE PUNTO LOG PARIZQ ENTERO PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // consola ::= CONSOLE PUNTO LOG PARIZQ ENTERO PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // consola ::= CONSOLE PUNTO LOG PARIZQ IDENTIFI PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // consola ::= CONSOLE PUNTO LOG PARIZQ IDENTIFI PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operacion ::= operacion MAS operacion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("operacion",27, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacion ::= expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("operacion",27, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentswitch ::= SWITCH PARIZQ IDENTIFI PARDER LLAIZQ contswitch LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentswitch",20, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // contswitch ::= contswitch contswitchh 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitch",21, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // contswitch ::= contswitchh 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitch",21, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contswitchh ::= CASE DECIMAL DOSPT contmet 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contswitchh ::= CASE IDENTIFI DOSPT contmet 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // contswitchh ::= CASE CADENA DOSPT contmet 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contswitchh ::= CASE ENTERO DOSPT contmet 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contswitchh ::= DEFAULT DOSPT contmet 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ condicion PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ condicion PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ DIFER PARIZQ condicion PARDER PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ DIFER PARIZQ condicion PARDER PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ciclowhile ::= WHILE PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclowhile",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ciclowhile ::= WHILE PARIZQ DIFER PARIZQ condicion PARDER PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclowhile",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ciclofor ::= FOR PARIZQ tipovar IDENTIFI IGUAL ENTERO PTCOMA condicion PTCOMA incremento PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclofor",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ciclofor ::= FOR PARIZQ IDENTIFI IGUAL ENTERO PTCOMA condicion PTCOMA incremento PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclofor",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // incremento ::= IDENTIFI MAS MAS 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("incremento",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // incremento ::= IDENTIFI MENOS MENOS 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("incremento",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER ELSE LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER ELSE LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // opelog ::= AND AND 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("opelog",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // opelog ::= OR OR 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("opelog",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // opelog ::= DIFER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("opelog",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= IDENTIFI 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= ENTERO 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= CADENA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicion ::= expresion MAYOR IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicion ::= expresion MENOR IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicion ::= expresion IGUAL IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicion ::= expresion DIFER IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // quebrar ::= BREAK 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("quebrar",26, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // quebrar ::= BREAK PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("quebrar",26, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // paramet ::= paramet COMA paramett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramet",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // paramet ::= paramett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramet",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // paramett ::= IDENTIFI 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // paramett ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // paramett ::= ENTERO 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // paramett ::= CADENA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // variables ::= tipovar IDENTIFI IGUAL valuevar PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // variables ::= tipovar IDENTIFI IGUAL valuevar 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variables ::= IDENTIFI IGUAL valuevar PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variables ::= IDENTIFI IGUAL valuevar 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipovar ::= VAR 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("tipovar",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipovar ::= LET 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("tipovar",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipovar ::= CONST 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("tipovar",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valuevar ::= ENTERO 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valuevar ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valuevar ::= CADENA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valuevar ::= TRUE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valuevar ::= FALSE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoJS$do_action_part00000000(
                               CUP$SintacticoJS$act_num,
                               CUP$SintacticoJS$parser,
                               CUP$SintacticoJS$stack,
                               CUP$SintacticoJS$top);
    }
}

}
