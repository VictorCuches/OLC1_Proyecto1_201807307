
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadoresJS;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\010\000\002\003\007" +
    "\000\002\003\004\000\002\003\004\000\002\004\004\000" +
    "\002\004\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\011\011\000\002\011\010\000\002\014\004" +
    "\000\002\014\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\032\007\000\002\032\006\000\002\032\006\000" +
    "\002\032\005\000\002\033\012\000\002\033\011\000\002" +
    "\033\011\000\002\033\010\000\002\031\011\000\002\031" +
    "\010\000\002\031\011\000\002\031\010\000\002\031\011" +
    "\000\002\031\010\000\002\031\011\000\002\031\010\000" +
    "\002\026\011\000\002\027\004\000\002\027\003\000\002" +
    "\030\006\000\002\030\006\000\002\030\006\000\002\030" +
    "\006\000\002\030\005\000\002\025\013\000\002\025\012" +
    "\000\002\025\016\000\002\025\015\000\002\024\011\000" +
    "\002\024\014\000\002\022\020\000\002\022\020\000\002" +
    "\022\017\000\002\022\017\000\002\023\005\000\002\023" +
    "\005\000\002\016\011\000\002\016\015\000\002\016\021" +
    "\000\002\016\013\000\002\016\017\000\002\016\023\000" +
    "\002\016\023\000\002\016\025\000\002\021\004\000\002" +
    "\021\004\000\002\021\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\020\005" +
    "\000\002\020\006\000\002\020\005\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\034\003\000\002" +
    "\034\004\000\002\012\005\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\006\007\000\002\006\006\000\002\006\006\000" +
    "\002\006\005\000\002\006\006\000\002\006\005\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\012\003\005\015\007\055\006\056\010\001" +
    "\002\000\004\002\000\001\002\000\012\002\ufffe\015\007" +
    "\055\006\056\010\001\002\000\010\015\007\055\006\056" +
    "\010\001\002\000\004\016\014\001\002\000\010\015\007" +
    "\055\006\056\010\001\002\000\004\002\012\001\002\000" +
    "\004\002\001\001\002\000\004\002\ufffa\001\002\000\004" +
    "\004\015\001\002\000\016\016\022\017\021\020\026\021" +
    "\032\055\027\056\025\001\002\000\020\005\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\055\ufff8\056\ufff8\001\002\000" +
    "\020\005\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\055\ufff4" +
    "\056\ufff4\001\002\000\004\016\u0113\001\002\000\004\016" +
    "\uff9a\001\002\000\006\006\037\011\036\001\002\000\020" +
    "\005\033\016\022\017\021\020\026\021\032\055\027\056" +
    "\025\001\002\000\020\005\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\055\ufff5\056\ufff5\001\002\000\020\005\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\055\ufff2\056\ufff2\001\002" +
    "\000\004\016\uff99\001\002\000\020\005\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\055\ufff3\056\ufff3\001\002\000\020" +
    "\005\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\055\ufff6\056" +
    "\ufff6\001\002\000\020\005\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\055\ufff7\056\ufff7\001\002\000\004\016\uff98\001" +
    "\002\000\012\002\ufffc\015\007\055\006\056\010\001\002" +
    "\000\020\005\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\055" +
    "\ufff9\056\ufff9\001\002\000\004\002\ufffd\001\002\000\020" +
    "\016\u010b\022\u010a\023\u010c\024\u0107\025\u0105\026\u0106\042" +
    "\u0108\001\002\000\014\007\040\016\044\022\045\023\043" +
    "\024\042\001\002\000\024\004\u0102\005\uffde\010\210\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\055\uffde\056\uffde\001\002" +
    "\000\006\007\uffa5\012\uffa5\001\002\000\006\007\uffa3\012" +
    "\uffa3\001\002\000\006\007\uffa2\012\uffa2\001\002\000\006" +
    "\007\uffa4\012\uffa4\001\002\000\006\007\uffa1\012\uffa1\001" +
    "\002\000\006\007\050\012\047\001\002\000\012\016\044" +
    "\022\045\023\043\024\042\001\002\000\024\004\051\005" +
    "\uffe0\010\052\016\uffe0\017\uffe0\020\uffe0\021\uffe0\055\uffe0" +
    "\056\uffe0\001\002\000\034\016\074\017\021\020\026\021" +
    "\032\027\064\031\077\032\060\033\067\034\063\037\073" +
    "\040\062\055\053\056\054\001\002\000\042\005\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\027\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\055" +
    "\uffe1\056\uffe1\001\002\000\042\005\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\027\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\055\uffe3\056\uffe3" +
    "\001\002\000\042\005\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\055\uffe2\056\uffe2\001\002\000" +
    "\036\005\u0100\016\074\017\021\020\026\021\032\027\064" +
    "\031\077\032\060\033\067\034\063\037\073\040\062\055" +
    "\053\056\054\001\002\000\042\005\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\055\uffe4\056\uffe4" +
    "\001\002\000\042\005\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\055\uffeb\056\uffeb\001\002\000" +
    "\004\006\362\001\002\000\042\005\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\027\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\055\uffed\056\uffed" +
    "\001\002\000\004\014\343\001\002\000\004\006\313\001" +
    "\002\000\004\006\230\001\002\000\042\005\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\027\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\055\uffe9" +
    "\056\uffe9\001\002\000\042\005\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\055\uffe8\056\uffe8\001" +
    "\002\000\004\004\212\001\002\000\042\005\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\027\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\055\uffec" +
    "\056\uffec\001\002\000\042\005\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\055\uffe5\056\uffe5\001" +
    "\002\000\042\005\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\027\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\055\uffe6\056\uffe6\001\002\000\044" +
    "\005\uffa8\010\211\016\uffa8\017\uffa8\020\uffa8\021\uffa8\027" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\040\uffa8\055\uffa8\056\uffa8\001\002\000\006\006" +
    "\204\011\036\001\002\000\042\005\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\027\uffea\031\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\055\uffea\056\uffea" +
    "\001\002\000\042\005\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\027\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\055\uffe7\056\uffe7\001\002\000" +
    "\004\006\101\001\002\000\042\005\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\027\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\055\uffee\056\uffee" +
    "\001\002\000\012\016\103\017\021\020\026\021\032\001" +
    "\002\000\004\016\160\001\002\000\004\011\104\001\002" +
    "\000\006\016\105\023\106\001\002\000\004\010\150\001" +
    "\002\000\004\010\107\001\002\000\012\016\113\022\114" +
    "\023\112\024\111\001\002\000\004\010\134\001\002\000" +
    "\022\007\uffb1\010\uffb1\011\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\001\002\000\022\007\uffb0\010\uffb0\011" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\001\002" +
    "\000\022\007\uffb2\010\uffb2\011\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\001\002\000\022\007\uffaf\010\uffaf" +
    "\011\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\001" +
    "\002\000\012\011\116\043\121\044\117\045\120\001\002" +
    "\000\004\011\132\001\002\000\014\011\127\016\113\022" +
    "\114\023\112\024\111\001\002\000\004\011\125\001\002" +
    "\000\014\011\122\016\113\022\114\023\112\024\111\001" +
    "\002\000\012\016\113\022\114\023\112\024\111\001\002" +
    "\000\014\007\uffae\010\uffae\045\uffae\046\uffae\047\uffae\001" +
    "\002\000\014\007\uffad\010\uffad\045\uffad\046\uffad\047\uffad" +
    "\001\002\000\012\016\113\022\114\023\112\024\111\001" +
    "\002\000\014\007\uffa9\010\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\001\002\000\012\016\113\022\114\023\112\024\111\001" +
    "\002\000\014\007\uffac\010\uffac\045\uffac\046\uffac\047\uffac" +
    "\001\002\000\014\007\uffab\010\uffab\045\uffab\046\uffab\047" +
    "\uffab\001\002\000\012\016\113\022\114\023\112\024\111" +
    "\001\002\000\014\007\uffaa\010\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\001\002\000\004\016\136\001\002\000\004\007\143" +
    "\001\002\000\006\050\137\051\140\001\002\000\004\050" +
    "\142\001\002\000\004\051\141\001\002\000\004\007\uffbe" +
    "\001\002\000\004\007\uffbf\001\002\000\004\004\144\001" +
    "\002\000\034\016\074\017\021\020\026\021\032\027\064" +
    "\031\077\032\060\033\067\034\063\037\073\040\062\055" +
    "\053\056\054\001\002\000\036\005\146\016\074\017\021" +
    "\020\026\021\032\027\064\031\077\032\060\033\067\034" +
    "\063\037\073\040\062\055\053\056\054\001\002\000\042" +
    "\005\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\027\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\055\uffc1\056\uffc1\001\002\000\042\005\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\027\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\055" +
    "\uffef\056\uffef\001\002\000\012\016\113\022\114\023\112" +
    "\024\111\001\002\000\004\010\152\001\002\000\004\016" +
    "\136\001\002\000\004\007\154\001\002\000\004\004\155" +
    "\001\002\000\034\016\074\017\021\020\026\021\032\027" +
    "\064\031\077\032\060\033\067\034\063\037\073\040\062" +
    "\055\053\056\054\001\002\000\036\005\157\016\074\017" +
    "\021\020\026\021\032\027\064\031\077\032\060\033\067" +
    "\034\063\037\073\040\062\055\053\056\054\001\002\000" +
    "\042\005\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\027\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\055\uffc0\056\uffc0\001\002\000\004\011\161" +
    "\001\002\000\006\016\163\023\162\001\002\000\004\010" +
    "\174\001\002\000\004\010\164\001\002\000\012\016\113" +
    "\022\114\023\112\024\111\001\002\000\004\010\166\001" +
    "\002\000\004\016\136\001\002\000\004\007\170\001\002" +
    "\000\004\004\171\001\002\000\034\016\074\017\021\020" +
    "\026\021\032\027\064\031\077\032\060\033\067\034\063" +
    "\037\073\040\062\055\053\056\054\001\002\000\036\005" +
    "\173\016\074\017\021\020\026\021\032\027\064\031\077" +
    "\032\060\033\067\034\063\037\073\040\062\055\053\056" +
    "\054\001\002\000\042\005\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\055\uffc2\056\uffc2\001\002" +
    "\000\012\016\113\022\114\023\112\024\111\001\002\000" +
    "\004\010\176\001\002\000\004\016\136\001\002\000\004" +
    "\007\200\001\002\000\004\004\201\001\002\000\034\016" +
    "\074\017\021\020\026\021\032\027\064\031\077\032\060" +
    "\033\067\034\063\037\073\040\062\055\053\056\054\001" +
    "\002\000\036\005\203\016\074\017\021\020\026\021\032" +
    "\027\064\031\077\032\060\033\067\034\063\037\073\040" +
    "\062\055\053\056\054\001\002\000\042\005\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\027\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\055\uffc3" +
    "\056\uffc3\001\002\000\014\007\205\016\044\022\045\023" +
    "\043\024\042\001\002\000\044\005\uffde\010\210\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\027\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\055\uffde" +
    "\056\uffde\001\002\000\006\007\207\012\047\001\002\000" +
    "\044\005\uffe0\010\052\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\027\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\055\uffe0\056\uffe0\001\002\000\042" +
    "\005\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\027\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\055\uffdf\056\uffdf\001\002\000\042\005\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\027\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\055" +
    "\uffa7\056\uffa7\001\002\000\034\016\074\017\021\020\026" +
    "\021\032\027\064\031\077\032\060\033\067\034\063\037" +
    "\073\040\062\055\053\056\054\001\002\000\036\005\214" +
    "\016\074\017\021\020\026\021\032\027\064\031\077\032" +
    "\060\033\067\034\063\037\073\040\062\055\053\056\054" +
    "\001\002\000\004\032\215\001\002\000\004\006\216\001" +
    "\002\000\014\016\113\022\114\023\112\024\111\045\220" +
    "\001\002\000\004\007\226\001\002\000\004\006\221\001" +
    "\002\000\012\016\113\022\114\023\112\024\111\001\002" +
    "\000\004\007\223\001\002\000\004\007\224\001\002\000" +
    "\044\005\uffc6\010\225\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\055\uffc6\056\uffc6\001\002\000\042" +
    "\005\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\027\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\055\uffc7\056\uffc7\001\002\000\044\005\uffc8\010" +
    "\227\016\uffc8\017\uffc8\020\uffc8\021\uffc8\027\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\055\uffc8\056\uffc8\001\002\000\042\005\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\027\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\055\uffc9" +
    "\056\uffc9\001\002\000\012\016\113\022\114\023\112\024" +
    "\111\001\002\000\012\007\234\045\235\046\233\047\236" +
    "\001\002\000\012\016\113\022\114\023\112\024\111\001" +
    "\002\000\004\046\264\001\002\000\004\004\240\001\002" +
    "\000\012\016\uffb3\022\uffb3\023\uffb3\024\uffb3\001\002\000" +
    "\004\047\237\001\002\000\012\016\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\001\002\000\034\016\074\017\021\020\026\021" +
    "\032\027\064\031\077\032\060\033\067\034\063\037\073" +
    "\040\062\055\053\056\054\001\002\000\036\005\242\016" +
    "\074\017\021\020\026\021\032\027\064\031\077\032\060" +
    "\033\067\034\063\037\073\040\062\055\053\056\054\001" +
    "\002\000\044\005\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\027\uffbd\030\243\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\055\uffbd\056\uffbd\001\002" +
    "\000\006\004\244\027\245\001\002\000\034\016\074\017" +
    "\021\020\026\021\032\027\064\031\077\032\060\033\067" +
    "\034\063\037\073\040\062\055\053\056\054\001\002\000" +
    "\004\006\246\001\002\000\012\016\113\022\114\023\112" +
    "\024\111\001\002\000\012\007\251\045\235\046\233\047" +
    "\236\001\002\000\012\016\113\022\114\023\112\024\111" +
    "\001\002\000\004\004\252\001\002\000\034\016\074\017" +
    "\021\020\026\021\032\027\064\031\077\032\060\033\067" +
    "\034\063\037\073\040\062\055\053\056\054\001\002\000" +
    "\036\005\254\016\074\017\021\020\026\021\032\027\064" +
    "\031\077\032\060\033\067\034\063\037\073\040\062\055" +
    "\053\056\054\001\002\000\042\005\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\027\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\055\uffbb\056\uffbb" +
    "\001\002\000\004\007\256\001\002\000\004\004\257\001" +
    "\002\000\034\016\074\017\021\020\026\021\032\027\064" +
    "\031\077\032\060\033\067\034\063\037\073\040\062\055" +
    "\053\056\054\001\002\000\036\005\261\016\074\017\021" +
    "\020\026\021\032\027\064\031\077\032\060\033\067\034" +
    "\063\037\073\040\062\055\053\056\054\001\002\000\042" +
    "\005\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\027\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\055\uffb7\056\uffb7\001\002\000\036\005\263\016" +
    "\074\017\021\020\026\021\032\027\064\031\077\032\060" +
    "\033\067\034\063\037\073\040\062\055\053\056\054\001" +
    "\002\000\042\005\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\027\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\055\uffbc\056\uffbc\001\002\000\012" +
    "\016\uffb5\022\uffb5\023\uffb5\024\uffb5\001\002\000\004\007" +
    "\266\001\002\000\004\004\267\001\002\000\034\016\074" +
    "\017\021\020\026\021\032\027\064\031\077\032\060\033" +
    "\067\034\063\037\073\040\062\055\053\056\054\001\002" +
    "\000\036\005\271\016\074\017\021\020\026\021\032\027" +
    "\064\031\077\032\060\033\067\034\063\037\073\040\062" +
    "\055\053\056\054\001\002\000\044\005\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\027\uffba\030\272\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\055" +
    "\uffba\056\uffba\001\002\000\006\004\273\027\274\001\002" +
    "\000\034\016\074\017\021\020\026\021\032\027\064\031" +
    "\077\032\060\033\067\034\063\037\073\040\062\055\053" +
    "\056\054\001\002\000\004\006\275\001\002\000\012\016" +
    "\113\022\114\023\112\024\111\001\002\000\012\007\300" +
    "\045\235\046\233\047\236\001\002\000\012\016\113\022" +
    "\114\023\112\024\111\001\002\000\004\004\301\001\002" +
    "\000\034\016\074\017\021\020\026\021\032\027\064\031" +
    "\077\032\060\033\067\034\063\037\073\040\062\055\053" +
    "\056\054\001\002\000\036\005\303\016\074\017\021\020" +
    "\026\021\032\027\064\031\077\032\060\033\067\034\063" +
    "\037\073\040\062\055\053\056\054\001\002\000\042\005" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\027\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\055\uffb8\056\uffb8\001\002\000\004\007\305\001\002" +
    "\000\004\004\306\001\002\000\034\016\074\017\021\020" +
    "\026\021\032\027\064\031\077\032\060\033\067\034\063" +
    "\037\073\040\062\055\053\056\054\001\002\000\036\005" +
    "\310\016\074\017\021\020\026\021\032\027\064\031\077" +
    "\032\060\033\067\034\063\037\073\040\062\055\053\056" +
    "\054\001\002\000\042\005\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\055\uffb6\056\uffb6\001\002" +
    "\000\036\005\312\016\074\017\021\020\026\021\032\027" +
    "\064\031\077\032\060\033\067\034\063\037\073\040\062" +
    "\055\053\056\054\001\002\000\042\005\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\055\uffb9\056" +
    "\uffb9\001\002\000\004\016\314\001\002\000\004\007\315" +
    "\001\002\000\004\004\316\001\002\000\006\035\322\036" +
    "\317\001\002\000\004\013\341\001\002\000\010\005\uffcf" +
    "\035\uffcf\036\uffcf\001\002\000\010\005\337\035\322\036" +
    "\317\001\002\000\012\016\324\022\325\023\326\024\323" +
    "\001\002\000\004\013\335\001\002\000\004\013\333\001" +
    "\002\000\004\013\331\001\002\000\004\013\327\001\002" +
    "\000\034\016\074\017\021\020\026\021\032\027\064\031" +
    "\077\032\060\033\067\034\063\037\073\040\062\055\053" +
    "\056\054\001\002\000\042\005\uffcb\016\074\017\021\020" +
    "\026\021\032\027\064\031\077\032\060\033\067\034\063" +
    "\035\uffcb\036\uffcb\037\073\040\062\055\053\056\054\001" +
    "\002\000\034\016\074\017\021\020\026\021\032\027\064" +
    "\031\077\032\060\033\067\034\063\037\073\040\062\055" +
    "\053\056\054\001\002\000\042\005\uffcc\016\074\017\021" +
    "\020\026\021\032\027\064\031\077\032\060\033\067\034" +
    "\063\035\uffcc\036\uffcc\037\073\040\062\055\053\056\054" +
    "\001\002\000\034\016\074\017\021\020\026\021\032\027" +
    "\064\031\077\032\060\033\067\034\063\037\073\040\062" +
    "\055\053\056\054\001\002\000\042\005\uffcd\016\074\017" +
    "\021\020\026\021\032\027\064\031\077\032\060\033\067" +
    "\034\063\035\uffcd\036\uffcd\037\073\040\062\055\053\056" +
    "\054\001\002\000\034\016\074\017\021\020\026\021\032" +
    "\027\064\031\077\032\060\033\067\034\063\037\073\040" +
    "\062\055\053\056\054\001\002\000\042\005\uffce\016\074" +
    "\017\021\020\026\021\032\027\064\031\077\032\060\033" +
    "\067\034\063\035\uffce\036\uffce\037\073\040\062\055\053" +
    "\056\054\001\002\000\042\005\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\055\uffd1\056\uffd1\001" +
    "\002\000\010\005\uffd0\035\uffd0\036\uffd0\001\002\000\034" +
    "\016\074\017\021\020\026\021\032\027\064\031\077\032" +
    "\060\033\067\034\063\037\073\040\062\055\053\056\054" +
    "\001\002\000\042\005\uffca\016\074\017\021\020\026\021" +
    "\032\027\064\031\077\032\060\033\067\034\063\035\uffca" +
    "\036\uffca\037\073\040\062\055\053\056\054\001\002\000" +
    "\004\041\344\001\002\000\004\006\345\001\002\000\012" +
    "\016\347\022\351\023\350\024\346\001\002\000\004\007" +
    "\360\001\002\000\004\007\356\001\002\000\004\007\354" +
    "\001\002\000\004\007\352\001\002\000\044\005\uffd8\010" +
    "\353\016\uffd8\017\uffd8\020\uffd8\021\uffd8\027\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\055\uffd8\056\uffd8\001\002\000\042\005\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\027\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\055\uffd9" +
    "\056\uffd9\001\002\000\044\005\uffd4\010\355\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\055\uffd4\056" +
    "\uffd4\001\002\000\042\005\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\055\uffd5\056\uffd5\001\002" +
    "\000\044\005\uffd2\010\357\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\027\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\055\uffd2\056\uffd2\001\002\000" +
    "\042\005\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\027\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\055\uffd3\056\uffd3\001\002\000\044\005\uffd6" +
    "\010\361\016\uffd6\017\uffd6\020\uffd6\021\uffd6\027\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\055\uffd6\056\uffd6\001\002\000\042\005\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\027\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\055" +
    "\uffd7\056\uffd7\001\002\000\014\016\113\022\114\023\112" +
    "\024\111\045\364\001\002\000\004\007\374\001\002\000" +
    "\004\006\365\001\002\000\012\016\113\022\114\023\112" +
    "\024\111\001\002\000\004\007\367\001\002\000\004\007" +
    "\370\001\002\000\004\004\371\001\002\000\034\016\074" +
    "\017\021\020\026\021\032\027\064\031\077\032\060\033" +
    "\067\034\063\037\073\040\062\055\053\056\054\001\002" +
    "\000\036\005\373\016\074\017\021\020\026\021\032\027" +
    "\064\031\077\032\060\033\067\034\063\037\073\040\062" +
    "\055\053\056\054\001\002\000\042\005\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\055\uffc4\056" +
    "\uffc4\001\002\000\004\004\375\001\002\000\034\016\074" +
    "\017\021\020\026\021\032\027\064\031\077\032\060\033" +
    "\067\034\063\037\073\040\062\055\053\056\054\001\002" +
    "\000\036\005\377\016\074\017\021\020\026\021\032\027" +
    "\064\031\077\032\060\033\067\034\063\037\073\040\062" +
    "\055\053\056\054\001\002\000\042\005\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\055\uffc5\056" +
    "\uffc5\001\002\000\020\005\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\055\ufff1\056\ufff1\001\002\000\006\007\uffa6\012" +
    "\uffa6\001\002\000\034\016\074\017\021\020\026\021\032" +
    "\027\064\031\077\032\060\033\067\034\063\037\073\040" +
    "\062\055\053\056\054\001\002\000\036\005\u0104\016\074" +
    "\017\021\020\026\021\032\027\064\031\077\032\060\033" +
    "\067\034\063\037\073\040\062\055\053\056\054\001\002" +
    "\000\020\005\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\055" +
    "\ufff0\056\ufff0\001\002\000\044\005\uff94\010\uff94\016\uff94" +
    "\017\uff94\020\uff94\021\uff94\027\uff94\031\uff94\032\uff94\033" +
    "\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\055\uff94" +
    "\056\uff94\001\002\000\044\005\uff93\010\uff93\016\uff93\017" +
    "\uff93\020\uff93\021\uff93\027\uff93\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\055\uff93\056" +
    "\uff93\001\002\000\044\005\uff96\010\uff96\016\uff96\017\uff96" +
    "\020\uff96\021\uff96\027\uff96\031\uff96\032\uff96\033\uff96\034" +
    "\uff96\035\uff96\036\uff96\037\uff96\040\uff96\055\uff96\056\uff96" +
    "\001\002\000\004\006\u010f\001\002\000\044\005\uff9d\010" +
    "\u010e\016\uff9d\017\uff9d\020\uff9d\021\uff9d\027\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\055\uff9d\056\uff9d\001\002\000\044\005\uff95\010\uff95" +
    "\016\uff95\017\uff95\020\uff95\021\uff95\027\uff95\031\uff95\032" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95" +
    "\055\uff95\056\uff95\001\002\000\044\005\uff9b\010\u010d\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\027\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\055" +
    "\uff9b\056\uff9b\001\002\000\044\005\uff97\010\uff97\016\uff97" +
    "\017\uff97\020\uff97\021\uff97\027\uff97\031\uff97\032\uff97\033" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\055\uff97" +
    "\056\uff97\001\002\000\042\005\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\027\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\040\uff9c\055\uff9c\056\uff9c\001" +
    "\002\000\042\005\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\027\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\055\uff9e\056\uff9e\001\002\000\004" +
    "\022\u0110\001\002\000\004\007\u0111\001\002\000\044\005" +
    "\uffda\010\u0112\016\uffda\017\uffda\020\uffda\021\uffda\027\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\055\uffda\056\uffda\001\002\000\042\005\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\027\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\055\uffdb\056\uffdb\001\002\000\004\011\u0114\001\002\000" +
    "\016\022\u010a\023\u010c\024\u0107\025\u0105\026\u0106\042\u0115" +
    "\001\002\000\004\006\u0118\001\002\000\044\005\uff9f\010" +
    "\u0117\016\uff9f\017\uff9f\020\uff9f\021\uff9f\027\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040" +
    "\uff9f\055\uff9f\056\uff9f\001\002\000\042\005\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\027\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\055\uffa0" +
    "\056\uffa0\001\002\000\004\022\u0119\001\002\000\004\007" +
    "\u011a\001\002\000\044\005\uffdc\010\u011b\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\055\uffdc\056\uffdc" +
    "\001\002\000\042\005\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\055\uffdd\056\uffdd\001\002\000" +
    "\004\002\ufffb\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\006\002\010\003\003\001\001\000\002\001" +
    "\001\000\004\003\u011c\001\001\000\004\003\u011b\001\001" +
    "\000\002\001\001\000\004\003\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\022\005\015\006\030\007\017\011\027\032" +
    "\023\033\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\033\006\030\007\017\011\027\032\023\033\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u0108\001\001\000\006" +
    "\012\045\013\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0100\001" +
    "\001\000\002\001\001\000\034\006\060\007\017\014\054" +
    "\015\077\016\067\022\056\024\074\025\064\026\065\031" +
    "\075\032\071\033\070\034\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\060\007" +
    "\017\015\146\016\067\022\056\024\074\025\064\026\065" +
    "\031\075\032\071\033\070\034\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\114\020" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\127\001\001\000\002" +
    "\001\001\000\004\017\122\001\001\000\004\017\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\125" +
    "\001\001\000\002\001\001\000\004\017\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\132\001\001" +
    "\000\002\001\001\000\004\023\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\060\007\017\014\144\015\077\016\067\022\056" +
    "\024\074\025\064\026\065\031\075\032\071\033\070\034" +
    "\055\001\001\000\032\006\060\007\017\015\146\016\067" +
    "\022\056\024\074\025\064\026\065\031\075\032\071\033" +
    "\070\034\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\114\020\150\001\001\000\002\001\001\000" +
    "\004\023\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\060\007\017\014\155\015\077\016\067\022" +
    "\056\024\074\025\064\026\065\031\075\032\071\033\070" +
    "\034\055\001\001\000\032\006\060\007\017\015\146\016" +
    "\067\022\056\024\074\025\064\026\065\031\075\032\071" +
    "\033\070\034\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\114\020\164\001\001\000\002\001\001\000" +
    "\004\023\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\060\007\017\014\171\015\077\016\067\022" +
    "\056\024\074\025\064\026\065\031\075\032\071\033\070" +
    "\034\055\001\001\000\032\006\060\007\017\015\146\016" +
    "\067\022\056\024\074\025\064\026\065\031\075\032\071" +
    "\033\070\034\055\001\001\000\002\001\001\000\006\017" +
    "\114\020\174\001\001\000\002\001\001\000\004\023\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\060\007\017\014\201\015\077\016\067\022\056\024\074" +
    "\025\064\026\065\031\075\032\071\033\070\034\055\001" +
    "\001\000\032\006\060\007\017\015\146\016\067\022\056" +
    "\024\074\025\064\026\065\031\075\032\071\033\070\034" +
    "\055\001\001\000\002\001\001\000\006\012\205\013\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\060" +
    "\007\017\014\212\015\077\016\067\022\056\024\074\025" +
    "\064\026\065\031\075\032\071\033\070\034\055\001\001" +
    "\000\032\006\060\007\017\015\146\016\067\022\056\024" +
    "\074\025\064\026\065\031\075\032\071\033\070\034\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\114\020\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\114\020\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\114\020\230\001" +
    "\001\000\004\021\231\001\001\000\006\017\114\020\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\060" +
    "\007\017\014\240\015\077\016\067\022\056\024\074\025" +
    "\064\026\065\031\075\032\071\033\070\034\055\001\001" +
    "\000\032\006\060\007\017\015\146\016\067\022\056\024" +
    "\074\025\064\026\065\031\075\032\071\033\070\034\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\060\007\017\014\261\015\077\016\067\022\056\024\074" +
    "\025\064\026\065\031\075\032\071\033\070\034\055\001" +
    "\001\000\002\001\001\000\006\017\114\020\246\001\001" +
    "\000\004\021\247\001\001\000\006\017\114\020\254\001" +
    "\001\000\002\001\001\000\034\006\060\007\017\014\252" +
    "\015\077\016\067\022\056\024\074\025\064\026\065\031" +
    "\075\032\071\033\070\034\055\001\001\000\032\006\060" +
    "\007\017\015\146\016\067\022\056\024\074\025\064\026" +
    "\065\031\075\032\071\033\070\034\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\060\007\017\014\257\015\077\016\067\022\056\024\074" +
    "\025\064\026\065\031\075\032\071\033\070\034\055\001" +
    "\001\000\032\006\060\007\017\015\146\016\067\022\056" +
    "\024\074\025\064\026\065\031\075\032\071\033\070\034" +
    "\055\001\001\000\002\001\001\000\032\006\060\007\017" +
    "\015\146\016\067\022\056\024\074\025\064\026\065\031" +
    "\075\032\071\033\070\034\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\060\007\017\014\267\015\077\016\067\022\056" +
    "\024\074\025\064\026\065\031\075\032\071\033\070\034" +
    "\055\001\001\000\032\006\060\007\017\015\146\016\067" +
    "\022\056\024\074\025\064\026\065\031\075\032\071\033" +
    "\070\034\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\060\007\017\014\310\015\077\016\067\022" +
    "\056\024\074\025\064\026\065\031\075\032\071\033\070" +
    "\034\055\001\001\000\002\001\001\000\006\017\114\020" +
    "\275\001\001\000\004\021\276\001\001\000\006\017\114" +
    "\020\303\001\001\000\002\001\001\000\034\006\060\007" +
    "\017\014\301\015\077\016\067\022\056\024\074\025\064" +
    "\026\065\031\075\032\071\033\070\034\055\001\001\000" +
    "\032\006\060\007\017\015\146\016\067\022\056\024\074" +
    "\025\064\026\065\031\075\032\071\033\070\034\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\060\007\017\014\306\015\077\016\067\022" +
    "\056\024\074\025\064\026\065\031\075\032\071\033\070" +
    "\034\055\001\001\000\032\006\060\007\017\015\146\016" +
    "\067\022\056\024\074\025\064\026\065\031\075\032\071" +
    "\033\070\034\055\001\001\000\002\001\001\000\032\006" +
    "\060\007\017\015\146\016\067\022\056\024\074\025\064" +
    "\026\065\031\075\032\071\033\070\034\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\320\030\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\060\007\017\014\327" +
    "\015\077\016\067\022\056\024\074\025\064\026\065\031" +
    "\075\032\071\033\070\034\055\001\001\000\032\006\060" +
    "\007\017\015\146\016\067\022\056\024\074\025\064\026" +
    "\065\031\075\032\071\033\070\034\055\001\001\000\034" +
    "\006\060\007\017\014\331\015\077\016\067\022\056\024" +
    "\074\025\064\026\065\031\075\032\071\033\070\034\055" +
    "\001\001\000\032\006\060\007\017\015\146\016\067\022" +
    "\056\024\074\025\064\026\065\031\075\032\071\033\070" +
    "\034\055\001\001\000\034\006\060\007\017\014\333\015" +
    "\077\016\067\022\056\024\074\025\064\026\065\031\075" +
    "\032\071\033\070\034\055\001\001\000\032\006\060\007" +
    "\017\015\146\016\067\022\056\024\074\025\064\026\065" +
    "\031\075\032\071\033\070\034\055\001\001\000\034\006" +
    "\060\007\017\014\335\015\077\016\067\022\056\024\074" +
    "\025\064\026\065\031\075\032\071\033\070\034\055\001" +
    "\001\000\032\006\060\007\017\015\146\016\067\022\056" +
    "\024\074\025\064\026\065\031\075\032\071\033\070\034" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\060\007\017\014\341\015\077\016\067\022\056\024" +
    "\074\025\064\026\065\031\075\032\071\033\070\034\055" +
    "\001\001\000\032\006\060\007\017\015\146\016\067\022" +
    "\056\024\074\025\064\026\065\031\075\032\071\033\070" +
    "\034\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\114\020\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\114\020\365\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\060" +
    "\007\017\014\371\015\077\016\067\022\056\024\074\025" +
    "\064\026\065\031\075\032\071\033\070\034\055\001\001" +
    "\000\032\006\060\007\017\015\146\016\067\022\056\024" +
    "\074\025\064\026\065\031\075\032\071\033\070\034\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\060\007\017\014\375\015\077\016\067\022\056\024\074" +
    "\025\064\026\065\031\075\032\071\033\070\034\055\001" +
    "\001\000\032\006\060\007\017\015\146\016\067\022\056" +
    "\024\074\025\064\026\065\031\075\032\071\033\070\034" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\060\007\017\014\u0102\015\077\016" +
    "\067\022\056\024\074\025\064\026\065\031\075\032\071" +
    "\033\070\034\055\001\001\000\032\006\060\007\017\015" +
    "\146\016\067\022\056\024\074\025\064\026\065\031\075" +
    "\032\071\033\070\034\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u0115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoJS$actions {
  private final SintacticoJS parser;

  /** Constructor */
  CUP$SintacticoJS$actions(SintacticoJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action_part00000000(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJS$parser.done_parsing();
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= CLASS IDENTIFI LLAIZQ contenido LLADER instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= CLASS IDENTIFI LLAIZQ contenido LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= COMENTUNO instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= COMENTMUL instrucciones 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenido ::= contenido relleno 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contenido",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenido ::= relleno 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contenido",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // relleno ::= variables 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // relleno ::= metodo 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // relleno ::= callmetodo 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // relleno ::= importacion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // relleno ::= COMENTUNO 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // relleno ::= COMENTMUL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("relleno",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodo ::= IDENTIFI PARIZQ paramet PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("metodo",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodo ::= IDENTIFI PARIZQ PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("metodo",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // contmet ::= contmet contmett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmet",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contmet ::= contmett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmet",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contmett ::= variables 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contmett ::= sentencia 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // contmett ::= ciclofor 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // contmett ::= ciclowhile 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contmett ::= ciclodowhile 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contmett ::= sentswitch 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // contmett ::= consola 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contmett ::= callmetodo 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contmett ::= importacion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contmett ::= quebrar 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contmett ::= COMENTUNO 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contmett ::= COMENTMUL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contmett",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // callmetodo ::= IDENTIFI PARIZQ paramet PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // callmetodo ::= IDENTIFI PARIZQ paramet PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // callmetodo ::= IDENTIFI PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // callmetodo ::= IDENTIFI PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("callmetodo",24, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // importacion ::= tipovar IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // importacion ::= tipovar IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // importacion ::= IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // importacion ::= IDENTIFI IGUAL REQUIRE PARIZQ CADENA PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("importacion",25, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // consola ::= CONSOLE PUNTO LOG PARIZQ CADENA PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // consola ::= CONSOLE PUNTO LOG PARIZQ CADENA PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // consola ::= CONSOLE PUNTO LOG PARIZQ DECIMAL PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // consola ::= CONSOLE PUNTO LOG PARIZQ DECIMAL PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // consola ::= CONSOLE PUNTO LOG PARIZQ ENTERO PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // consola ::= CONSOLE PUNTO LOG PARIZQ ENTERO PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // consola ::= CONSOLE PUNTO LOG PARIZQ IDENTIFI PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // consola ::= CONSOLE PUNTO LOG PARIZQ IDENTIFI PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("consola",23, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentswitch ::= SWITCH PARIZQ IDENTIFI PARDER LLAIZQ contswitch LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentswitch",20, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // contswitch ::= contswitch contswitchh 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitch",21, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contswitch ::= contswitchh 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitch",21, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contswitchh ::= CASE DECIMAL DOSPT contmet 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contswitchh ::= CASE IDENTIFI DOSPT contmet 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contswitchh ::= CASE CADENA DOSPT contmet 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contswitchh ::= CASE ENTERO DOSPT contmet 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contswitchh ::= DEFAULT DOSPT contmet 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("contswitchh",22, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ condicion PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ condicion PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ DIFER PARIZQ condicion PARDER PARDER PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ciclodowhile ::= DO LLAIZQ contmet LLADER WHILE PARIZQ DIFER PARIZQ condicion PARDER PARDER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclodowhile",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ciclowhile ::= WHILE PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclowhile",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ciclowhile ::= WHILE PARIZQ DIFER PARIZQ condicion PARDER PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclowhile",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ciclofor ::= FOR PARIZQ tipovar IDENTIFI IGUAL ENTERO PTCOMA condicion PTCOMA incremento PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclofor",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ciclofor ::= FOR PARIZQ tipovar IDENTIFI IGUAL IDENTIFI PTCOMA condicion PTCOMA incremento PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclofor",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-13)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ciclofor ::= FOR PARIZQ IDENTIFI IGUAL ENTERO PTCOMA condicion PTCOMA incremento PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclofor",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ciclofor ::= FOR PARIZQ IDENTIFI IGUAL IDENTIFI PTCOMA condicion PTCOMA incremento PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ciclofor",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // incremento ::= IDENTIFI MAS MAS 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("incremento",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // incremento ::= IDENTIFI MENOS MENOS 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("incremento",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER ELSE LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER ELSE LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= IF PARIZQ condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER ELSE IF PARIZQ condicion opelog condicion PARDER LLAIZQ contmet LLADER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // opelog ::= AND AND 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("opelog",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // opelog ::= OR OR 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("opelog",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // opelog ::= DIFER 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("opelog",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= IDENTIFI 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= ENTERO 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= CADENA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicion ::= expresion MAYOR IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicion ::= expresion MENOR IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condicion ::= expresion IGUAL IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion ::= expresion DIFER IGUAL expresion 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // quebrar ::= BREAK 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("quebrar",26, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // quebrar ::= BREAK PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("quebrar",26, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // paramet ::= paramet COMA paramett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramet",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // paramet ::= paramett 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramet",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // paramett ::= IDENTIFI 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // paramett ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // paramett ::= ENTERO 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // paramett ::= CADENA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("paramett",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // variables ::= tipovar IDENTIFI IGUAL valuevar PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variables ::= tipovar IDENTIFI IGUAL valuevar 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variables ::= IDENTIFI IGUAL valuevar PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variables ::= IDENTIFI IGUAL valuevar 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variables ::= IDENTIFI IGUAL IDENTIFI PTCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variables ::= IDENTIFI IGUAL IDENTIFI 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipovar ::= VAR 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("tipovar",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipovar ::= LET 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("tipovar",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipovar ::= CONST 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("tipovar",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // valuevar ::= ENTERO 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valuevar ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valuevar ::= CADENA 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valuevar ::= TRUE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valuevar ::= FALSE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("valuevar",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoJS$do_action_part00000000(
                               CUP$SintacticoJS$act_num,
                               CUP$SintacticoJS$parser,
                               CUP$SintacticoJS$stack,
                               CUP$SintacticoJS$top);
    }
}

}
